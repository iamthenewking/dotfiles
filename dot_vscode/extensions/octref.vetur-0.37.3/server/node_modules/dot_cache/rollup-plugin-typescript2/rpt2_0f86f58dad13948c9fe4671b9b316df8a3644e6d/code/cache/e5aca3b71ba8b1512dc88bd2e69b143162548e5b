{"code":"import { getFileFsPath } from '../utils/paths';\r\nexport class VueInfoService {\r\n    constructor() {\r\n        this.vueFileInfo = new Map();\r\n    }\r\n    init(languageModes) {\r\n        this.languageModes = languageModes;\r\n    }\r\n    updateInfo(doc, info) {\r\n        this.vueFileInfo.set(getFileFsPath(doc.uri), info);\r\n    }\r\n    getInfo(doc) {\r\n        this.languageModes.getAllLanguageModeRangesInDocument(doc).forEach(m => {\r\n            if (m.mode.updateFileInfo) {\r\n                m.mode.updateFileInfo(doc);\r\n            }\r\n        });\r\n        return this.vueFileInfo.get(getFileFsPath(doc.uri));\r\n    }\r\n}\r\n//# sourceMappingURL=vueInfoService.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/src/utils/paths.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/src/embeddedSupport/languageModes.ts"],"map":"{\"version\":3,\"file\":\"vueInfoService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/vueInfoService.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAsG/C,MAAM,OAAO,cAAc;IAIzB;QAFQ,gBAAW,GAA6B,IAAI,GAAG,EAAE,CAAC;IAE3C,CAAC;IAEhB,IAAI,CAAC,aAA4B;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,UAAU,CAAC,GAAiB,EAAE,IAAiB;QAC7C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,CAAC,GAAiB;QACvB,IAAI,CAAC,aAAa,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrE,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE;gBACzB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;CACF\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/vueInfoService.d.ts","writeByteOrderMark":false,"text":"import { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport { Definition } from 'vscode-languageserver-types';\r\nimport { LanguageModes } from '../embeddedSupport/languageModes';\r\n/**\r\n * State associated with a specific Vue file\r\n * The state is shared between different modes\r\n */\r\nexport interface VueFileInfo {\r\n    /**\r\n     * The default export component info from script section\r\n     */\r\n    componentInfo: ComponentInfo;\r\n}\r\nexport interface ComponentInfo {\r\n    name?: string;\r\n    definition?: Definition;\r\n    insertInOptionAPIPos?: number;\r\n    componentsDefine?: {\r\n        start: number;\r\n        end: number;\r\n        insertPos: number;\r\n    };\r\n    childComponents?: ChildComponent[];\r\n    emits?: EmitInfo[];\r\n    /**\r\n     * Todo: Extract type info in cases like\r\n     * props: {\r\n     *   foo: String\r\n     * }\r\n     */\r\n    props?: PropInfo[];\r\n    data?: DataInfo[];\r\n    computed?: ComputedInfo[];\r\n    methods?: MethodInfo[];\r\n}\r\nexport interface ChildComponent {\r\n    name: string;\r\n    documentation?: string;\r\n    definition?: {\r\n        path: string;\r\n        start: number;\r\n        end: number;\r\n    };\r\n    global: boolean;\r\n    info?: VueFileInfo;\r\n}\r\nexport interface EmitInfo {\r\n    name: string;\r\n    /**\r\n     * `true` if\r\n     * emits: {\r\n     *   foo: (...) => {...}\r\n     * }\r\n     *\r\n     * `false` if\r\n     * - `emits: ['foo']`\r\n     * - `@Emit()`\r\n     * - `emits: { foo: null }`\r\n     */\r\n    hasValidator: boolean;\r\n    documentation?: string;\r\n    typeString?: string;\r\n}\r\nexport interface PropInfo {\r\n    name: string;\r\n    /**\r\n     * `true` if\r\n     * props: {\r\n     *   foo: { ... }\r\n     * }\r\n     *\r\n     * `false` if\r\n     * - `props: ['foo']`\r\n     * - `props: { foo: String }`\r\n     *\r\n     */\r\n    hasObjectValidator: boolean;\r\n    required: boolean;\r\n    isBoundToModel: boolean;\r\n    documentation?: string;\r\n    typeString?: string;\r\n}\r\nexport interface DataInfo {\r\n    name: string;\r\n    documentation?: string;\r\n}\r\nexport interface ComputedInfo {\r\n    name: string;\r\n    documentation?: string;\r\n}\r\nexport interface MethodInfo {\r\n    name: string;\r\n    documentation?: string;\r\n}\r\nexport declare class VueInfoService {\r\n    private languageModes;\r\n    private vueFileInfo;\r\n    constructor();\r\n    init(languageModes: LanguageModes): void;\r\n    updateInfo(doc: TextDocument, info: VueFileInfo): void;\r\n    getInfo(doc: TextDocument): VueFileInfo | undefined;\r\n}\r\n"}}
