{"code":"import { CompletionItem, CompletionItemKind, Position } from 'vscode-languageserver-types';\r\nimport { buildAst, flattenAndFilterAst, findNodeAtPosition, isFunctionNode, isSelectorCallNode, isSelectorNode, isVariableNode } from './parser';\r\nimport { cssData } from './css-browser-data';\r\nimport builtIn from './built-in';\r\nimport _ from 'lodash';\r\nfunction prepareName(name) {\r\n    return name.replace(/\\{|\\}/g, '').trim();\r\n}\r\n/**\r\n * Naive check whether currentWord is class or id\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport function isClassOrId(currentWord) {\r\n    return /^[.#&]/.test(currentWord);\r\n}\r\n/**\r\n * Naive check whether currentWord is at rule\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport function isAtRule(currentWord) {\r\n    return _.startsWith(currentWord, '@');\r\n}\r\n/**\r\n * Naive check whether currentWord is value for given property\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport function isValue(data, currentWord) {\r\n    const property = getPropertyName(currentWord);\r\n    return !!property && Boolean(findPropertySchema(data, property));\r\n}\r\n/**\r\n * Formats property name\r\n * @param {String} currentWord\r\n * @return {String}\r\n */\r\nexport function getPropertyName(currentWord) {\r\n    return currentWord.trim().replace(':', ' ').split(' ')[0];\r\n}\r\n/**\r\n * Search for property in cssSchema\r\n * @param {Object} data\r\n * @param {String} property\r\n * @return {Object}\r\n */\r\nexport function findPropertySchema(data, property) {\r\n    return _.find(data.properties, item => item.name === property);\r\n}\r\n/**\r\n * Handler for variables\r\n * @param {Object} node\r\n * @param {String[]} text - text editor content splitted by lines\r\n * @return {SymbolInformation}\r\n */\r\nfunction _variableSymbol(node, text, currentWord) {\r\n    const name = node.name;\r\n    const lineno = Number(node.val.lineno) - 1;\r\n    const completionItem = CompletionItem.create(name);\r\n    completionItem.detail = text[lineno].trim();\r\n    completionItem.kind = CompletionItemKind.Variable;\r\n    return completionItem;\r\n}\r\n/**\r\n * Handler for function\r\n * @param {Object} node\r\n * @param {String[]} text - text editor content splitted by lines\r\n * @return {CompletionItem}\r\n */\r\nfunction _functionSymbol(node, text) {\r\n    const name = node.name;\r\n    const completionItem = CompletionItem.create(name);\r\n    completionItem.kind = CompletionItemKind.Function;\r\n    return completionItem;\r\n}\r\n/**\r\n * Handler for selectors\r\n * @param {Object} node\r\n * @param {String[]} text - text editor content splitted by lines\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nfunction _selectorSymbol(node, text, currentWord) {\r\n    const firstSegment = node.segments[0];\r\n    const name = firstSegment.string\r\n        ? node.segments.map(s => s.string).join('')\r\n        : firstSegment.nodes.map(s => s.name).join('');\r\n    const completionItem = CompletionItem.create(name);\r\n    completionItem.kind = CompletionItemKind.Class;\r\n    return completionItem;\r\n}\r\n/**\r\n * Handler for selector call symbols\r\n * @param {Object} node\r\n * @param {String[]} text - text editor content splitted by lines\r\n * @return {CompletionItem}\r\n */\r\nfunction _selectorCallSymbol(node, text) {\r\n    const lineno = Number(node.lineno) - 1;\r\n    const name = prepareName(text[lineno]);\r\n    const completionItem = CompletionItem.create(name);\r\n    completionItem.kind = CompletionItemKind.Class;\r\n    return completionItem;\r\n}\r\nfunction isVisible(useSite, defSite) {\r\n    if (!useSite || !defSite) {\r\n        return true;\r\n    }\r\n    if (useSite.length < defSite.length) {\r\n        return false;\r\n    }\r\n    for (const [use, def] of _.zip(useSite, defSite)) {\r\n        if (use && def && use > def) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns completion items lists from document symbols\r\n * @param {String} text\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport function getAllSymbols(text, currentWord, position) {\r\n    const ast = buildAst(text);\r\n    if (!ast) {\r\n        return [];\r\n    }\r\n    const node = findNodeAtPosition(ast, position);\r\n    const scope = node ? node.__scope : undefined;\r\n    const splittedText = text.split('\\n');\r\n    const rawSymbols = flattenAndFilterAst(ast).filter(item => ['Media', 'Keyframes', 'Atrule', 'Import', 'Require', 'Supports', 'Literal'].indexOf(item.__type) === -1);\r\n    return _.compact(rawSymbols.map(item => {\r\n        if (!isVisible(scope, item.__scope)) {\r\n            return undefined;\r\n        }\r\n        if (isVariableNode(item)) {\r\n            return _variableSymbol(item, splittedText, currentWord);\r\n        }\r\n        if (isFunctionNode(item)) {\r\n            return _functionSymbol(item, splittedText);\r\n        }\r\n        if (isSelectorNode(item)) {\r\n            return _selectorSymbol(item, splittedText, currentWord);\r\n        }\r\n        if (isSelectorCallNode(item)) {\r\n            return _selectorCallSymbol(item, splittedText);\r\n        }\r\n    }));\r\n}\r\n/**\r\n * Returns at rules list for completion\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport function getAtRules(data, currentWord) {\r\n    if (!isAtRule(currentWord)) {\r\n        return [];\r\n    }\r\n    return data.atDirectives.map(property => {\r\n        const completionItem = CompletionItem.create(property.name);\r\n        completionItem.documentation = property.description;\r\n        completionItem.kind = CompletionItemKind.Keyword;\r\n        return completionItem;\r\n    });\r\n}\r\n/**\r\n * Returns property list for completion\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport function getProperties(data, currentWord, useSeparator) {\r\n    if (isClassOrId(currentWord) || isAtRule(currentWord)) {\r\n        return [];\r\n    }\r\n    return data.properties.map(property => {\r\n        const completionItem = CompletionItem.create(property.name);\r\n        completionItem.insertText = property.name + (useSeparator ? ': ' : ' ');\r\n        completionItem.documentation = property.description;\r\n        completionItem.kind = CompletionItemKind.Property;\r\n        return completionItem;\r\n    });\r\n}\r\n/**\r\n * Returns values for current property for completion list\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport function getValues(data, currentWord) {\r\n    const property = getPropertyName(currentWord);\r\n    const result = findPropertySchema(data, property);\r\n    const values = result && result.values;\r\n    if (!values) {\r\n        return [];\r\n    }\r\n    return values.map(property => {\r\n        const completionItem = CompletionItem.create(property.name);\r\n        completionItem.documentation = property.description;\r\n        completionItem.kind = CompletionItemKind.Value;\r\n        return completionItem;\r\n    });\r\n}\r\nexport function provideCompletionItems(document, position, useSeparator = false) {\r\n    const start = document.offsetAt(Position.create(position.line, 0));\r\n    const end = document.offsetAt(position);\r\n    const text = document.getText();\r\n    const currentWord = text.slice(start, end).trim();\r\n    const value = isValue(cssData, currentWord);\r\n    let completions = [];\r\n    if (value) {\r\n        const values = getValues(cssData, currentWord);\r\n        const symbols = getAllSymbols(text, currentWord, position).filter(item => item.kind === CompletionItemKind.Variable || item.kind === CompletionItemKind.Function);\r\n        completions = completions.concat(values, symbols, builtIn);\r\n    }\r\n    else {\r\n        const atRules = getAtRules(cssData, currentWord);\r\n        const properties = getProperties(cssData, currentWord, useSeparator);\r\n        const symbols = getAllSymbols(text, currentWord, position).filter(item => item.kind !== CompletionItemKind.Variable);\r\n        completions = completions.concat(properties, atRules, symbols);\r\n    }\r\n    return {\r\n        isIncomplete: false,\r\n        items: completions\r\n    };\r\n}\r\n//# sourceMappingURL=completion-item.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/src/modes/style/stylus/parser.ts","/Users/yoyo930021/git/vetur/server/src/modes/style/stylus/css-browser-data.ts","/Users/yoyo930021/git/vetur/server/src/modes/style/stylus/built-in.ts","/Users/yoyo930021/git/vetur/server/node_modules/@types/lodash/index.d.ts"],"map":"{\"version\":3,\"file\":\"completion-item.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/style/stylus/completion-item.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/style/stylus/completion-item.d.ts","writeByteOrderMark":false,"text":"import { CompletionItem, Position, CompletionList } from 'vscode-languageserver-types';\r\nimport type { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport { LoadedCSSData } from './css-browser-data';\r\n/**\r\n * Naive check whether currentWord is class or id\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport declare function isClassOrId(currentWord: string): boolean;\r\n/**\r\n * Naive check whether currentWord is at rule\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport declare function isAtRule(currentWord: string): boolean;\r\n/**\r\n * Naive check whether currentWord is value for given property\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {Boolean}\r\n */\r\nexport declare function isValue(data: LoadedCSSData, currentWord: string): boolean;\r\n/**\r\n * Formats property name\r\n * @param {String} currentWord\r\n * @return {String}\r\n */\r\nexport declare function getPropertyName(currentWord: string): string;\r\n/**\r\n * Search for property in cssSchema\r\n * @param {Object} data\r\n * @param {String} property\r\n * @return {Object}\r\n */\r\nexport declare function findPropertySchema(data: LoadedCSSData, property: string): import(\"vscode-css-languageservice\").IPropertyData | undefined;\r\n/**\r\n * Returns completion items lists from document symbols\r\n * @param {String} text\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport declare function getAllSymbols(text: string, currentWord: string, position: Position): CompletionItem[];\r\n/**\r\n * Returns at rules list for completion\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport declare function getAtRules(data: LoadedCSSData, currentWord: string): CompletionItem[];\r\n/**\r\n * Returns property list for completion\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport declare function getProperties(data: LoadedCSSData, currentWord: string, useSeparator: boolean): CompletionItem[];\r\n/**\r\n * Returns values for current property for completion list\r\n * @param {Object} data\r\n * @param {String} currentWord\r\n * @return {CompletionItem}\r\n */\r\nexport declare function getValues(data: LoadedCSSData, currentWord: string): CompletionItem[];\r\nexport declare function provideCompletionItems(document: TextDocument, position: Position, useSeparator?: boolean): CompletionList;\r\n"}}
