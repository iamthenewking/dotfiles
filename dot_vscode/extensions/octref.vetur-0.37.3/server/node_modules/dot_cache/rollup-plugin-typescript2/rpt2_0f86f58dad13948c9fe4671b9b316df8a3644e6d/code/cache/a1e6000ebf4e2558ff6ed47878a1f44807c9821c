{"code":"import ts from 'typescript';\r\nimport { SemanticTokenModifiers, SemanticTokenTypes } from 'vscode-languageserver';\r\nexport function getSemanticTokenLegends() {\r\n    const tokenModifiers = [];\r\n    [\r\n        [0 /* TokenModifier.declaration */, SemanticTokenModifiers.declaration],\r\n        [1 /* TokenModifier.static */, SemanticTokenModifiers.static],\r\n        [2 /* TokenModifier.async */, SemanticTokenModifiers.async],\r\n        [3 /* TokenModifier.readonly */, SemanticTokenModifiers.readonly],\r\n        [4 /* TokenModifier.defaultLibrary */, SemanticTokenModifiers.defaultLibrary],\r\n        [5 /* TokenModifier.local */, 'local'],\r\n        // vue\r\n        [6 /* TokenModifier.refValue */, 'refValue']\r\n    ].forEach(([tsModifier, legend]) => (tokenModifiers[tsModifier] = legend));\r\n    const tokenTypes = [];\r\n    [\r\n        [0 /* TsTokenType.class */, SemanticTokenTypes.class],\r\n        [1 /* TsTokenType.enum */, SemanticTokenTypes.enum],\r\n        [2 /* TsTokenType.interface */, SemanticTokenTypes.interface],\r\n        [3 /* TsTokenType.namespace */, SemanticTokenTypes.namespace],\r\n        [4 /* TsTokenType.typeParameter */, SemanticTokenTypes.typeParameter],\r\n        [5 /* TsTokenType.type */, SemanticTokenTypes.type],\r\n        [6 /* TsTokenType.parameter */, SemanticTokenTypes.parameter],\r\n        [7 /* TsTokenType.variable */, SemanticTokenTypes.variable],\r\n        [8 /* TsTokenType.enumMember */, SemanticTokenTypes.enumMember],\r\n        [9 /* TsTokenType.property */, SemanticTokenTypes.property],\r\n        [10 /* TsTokenType.function */, SemanticTokenTypes.function],\r\n        // member is renamed to method in vscode codebase to match LSP default\r\n        [11 /* TsTokenType.member */, SemanticTokenTypes.method]\r\n    ].forEach(([tokenType, legend]) => (tokenTypes[tokenType] = legend));\r\n    return {\r\n        tokenModifiers,\r\n        tokenTypes\r\n    };\r\n}\r\nexport function getTokenTypeFromClassification(tsClassification) {\r\n    return (tsClassification >> 8 /* TokenEncodingConsts.typeOffset */) - 1;\r\n}\r\nexport function getTokenModifierFromClassification(tsClassification) {\r\n    return tsClassification & 255 /* TokenEncodingConsts.modifierMask */;\r\n}\r\nexport function addCompositionApiRefTokens(tsModule, program, fileFsPath, exists, refTokensService) {\r\n    const sourceFile = program.getSourceFile(fileFsPath);\r\n    if (!sourceFile) {\r\n        return [];\r\n    }\r\n    const typeChecker = program.getTypeChecker();\r\n    const tokens = [];\r\n    walk(sourceFile, node => {\r\n        if (!ts.isIdentifier(node) || node.text !== 'value' || !ts.isPropertyAccessExpression(node.parent)) {\r\n            return;\r\n        }\r\n        const propertyAccess = node.parent;\r\n        let parentSymbol = typeChecker.getTypeAtLocation(propertyAccess.expression).symbol;\r\n        if (parentSymbol.flags & tsModule.SymbolFlags.Alias) {\r\n            parentSymbol = typeChecker.getAliasedSymbol(parentSymbol);\r\n        }\r\n        if (parentSymbol.name !== 'Ref') {\r\n            return;\r\n        }\r\n        const start = node.getStart();\r\n        const length = node.getWidth();\r\n        tokens.push([start, start + length]);\r\n        const exist = exists.find(token => token.start === start && token.length === length);\r\n        const encodedModifier = 1 << 6 /* TokenModifier.refValue */;\r\n        if (exist) {\r\n            exist.modifierSet |= encodedModifier;\r\n        }\r\n        else {\r\n            exists.push({\r\n                classificationType: 9 /* TsTokenType.property */,\r\n                length: node.getEnd() - node.getStart(),\r\n                modifierSet: encodedModifier,\r\n                start: node.getStart()\r\n            });\r\n        }\r\n    });\r\n    return tokens;\r\n}\r\nfunction walk(node, callback) {\r\n    node.forEachChild(child => {\r\n        callback(child);\r\n        walk(child, callback);\r\n    });\r\n}\r\n//# sourceMappingURL=semanticToken.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/typescript/lib/typescript.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver/lib/common/api.d.ts","/Users/yoyo930021/git/vetur/server/src/services/dependencyService.ts","/Users/yoyo930021/git/vetur/server/src/services/RefTokenService.ts","/Users/yoyo930021/git/vetur/server/src/types.ts"],"map":"{\"version\":3,\"file\":\"semanticToken.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modes/script/semanticToken.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/script/semanticToken.d.ts","writeByteOrderMark":false,"text":"import ts from 'typescript';\r\nimport { SemanticTokensLegend } from 'vscode-languageserver';\r\nimport { RuntimeLibrary } from '../../services/dependencyService';\r\nimport { RefTokensService } from '../../services/RefTokenService';\r\nimport { SemanticTokenOffsetData } from '../../types';\r\n/**\r\n * extended from https://github.com/microsoft/TypeScript/blob/35c8df04ad959224fad9037e340c1e50f0540a49/src/services/classifier2020.ts#L9\r\n * so that we don't have to map it into our own legend\r\n */\r\nexport declare const enum TsTokenType {\r\n    class = 0,\r\n    enum = 1,\r\n    interface = 2,\r\n    namespace = 3,\r\n    typeParameter = 4,\r\n    type = 5,\r\n    parameter = 6,\r\n    variable = 7,\r\n    enumMember = 8,\r\n    property = 9,\r\n    function = 10,\r\n    member = 11\r\n}\r\n/**\r\n * adopted from https://github.com/microsoft/TypeScript/blob/35c8df04ad959224fad9037e340c1e50f0540a49/src/services/classifier2020.ts#L13\r\n * so that we don't have to map it into our own legend\r\n */\r\nexport declare const enum TokenModifier {\r\n    declaration = 0,\r\n    static = 1,\r\n    async = 2,\r\n    readonly = 3,\r\n    defaultLibrary = 4,\r\n    local = 5,\r\n    refValue = 6\r\n}\r\nexport declare function getSemanticTokenLegends(): SemanticTokensLegend;\r\nexport declare function getTokenTypeFromClassification(tsClassification: number): number;\r\nexport declare function getTokenModifierFromClassification(tsClassification: number): number;\r\nexport declare function addCompositionApiRefTokens(tsModule: RuntimeLibrary['typescript'], program: ts.Program, fileFsPath: string, exists: SemanticTokenOffsetData[], refTokensService: RefTokensService): [number, number][];\r\n"}}
