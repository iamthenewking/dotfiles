{"code":"import { MarkupKind } from 'vscode-languageserver';\r\nimport { basename } from 'path';\r\nexport function getWordAtText(text, offset, wordDefinition) {\r\n    let lineStart = offset;\r\n    while (lineStart > 0 && !isNewlineCharacter(text.charCodeAt(lineStart - 1))) {\r\n        lineStart--;\r\n    }\r\n    const offsetInLine = offset - lineStart;\r\n    const lineText = text.slice(lineStart);\r\n    // make a copy of the regex as to not keep the state\r\n    const flags = wordDefinition.ignoreCase ? 'gi' : 'g';\r\n    wordDefinition = new RegExp(wordDefinition.source, flags);\r\n    let match = wordDefinition.exec(lineText);\r\n    while (match && match.index + match[0].length < offsetInLine) {\r\n        match = wordDefinition.exec(lineText);\r\n    }\r\n    if (match && match.index <= offsetInLine) {\r\n        return { start: match.index + lineStart, length: match[0].length };\r\n    }\r\n    return { start: offset, length: 0 };\r\n}\r\nexport function removeQuotes(str) {\r\n    return str.replace(/[\"']/g, '');\r\n}\r\nconst CR = '\\r'.charCodeAt(0);\r\nconst NL = '\\n'.charCodeAt(0);\r\nfunction isNewlineCharacter(charCode) {\r\n    return charCode === CR || charCode === NL;\r\n}\r\nconst nonEmptyLineRE = /^(?!$)/gm;\r\n/**\r\n *  wrap text in section tags like <template>, <style>\r\n *  add leading and trailing newline and optional indentation\r\n */\r\nexport function indentSection(text, options) {\r\n    const initialIndent = generateIndent(options);\r\n    return text.replace(nonEmptyLineRE, initialIndent);\r\n}\r\nfunction generateIndent(options) {\r\n    if (!options.options.useTabs) {\r\n        return ' '.repeat(options.options.tabSize);\r\n    }\r\n    else {\r\n        return '\\t';\r\n    }\r\n}\r\nexport function toMarkupContent(value) {\r\n    if (!value) {\r\n        return '';\r\n    }\r\n    return typeof value === 'string' ? { kind: MarkupKind.Markdown, value } : value;\r\n}\r\n// Convert module path to valid typescript identifier\r\n// https://github.com/microsoft/TypeScript/blob/master/src/services/codefixes/importFixes.ts#L951\r\nexport function modulePathToValidIdentifier(tsModule, modulePath, target) {\r\n    const baseName = basename(modulePath, '.vue');\r\n    let res = '';\r\n    let lastCharWasValid = true;\r\n    const firstCharCode = baseName.charCodeAt(0);\r\n    if (tsModule.isIdentifierStart(firstCharCode, target)) {\r\n        res += String.fromCharCode(firstCharCode);\r\n    }\r\n    else {\r\n        lastCharWasValid = false;\r\n    }\r\n    for (let i = 1; i < baseName.length; i++) {\r\n        const ch = baseName.charCodeAt(i);\r\n        const isValid = tsModule.isIdentifierPart(ch, target);\r\n        if (isValid) {\r\n            let char = String.fromCharCode(ch);\r\n            if (!lastCharWasValid) {\r\n                char = char.toUpperCase();\r\n            }\r\n            res += char;\r\n        }\r\n        lastCharWasValid = isValid;\r\n    }\r\n    return res;\r\n}\r\n//# sourceMappingURL=strings.js.map","references":["/Users/yoyo930021/git/vetur/server/src/config.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver/lib/common/api.d.ts","/Users/yoyo930021/git/vetur/server/src/services/dependencyService.ts","/Users/yoyo930021/git/vetur/server/node_modules/typescript/lib/typescript.d.ts"],"map":"{\"version\":3,\"file\":\"strings.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/strings.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/strings.d.ts","writeByteOrderMark":false,"text":"import { VLSFormatConfig } from '../config';\r\nimport { MarkupContent } from 'vscode-languageserver';\r\nimport { RuntimeLibrary } from '../services/dependencyService';\r\nimport type ts from 'typescript';\r\nexport declare function getWordAtText(text: string, offset: number, wordDefinition: RegExp): {\r\n    start: number;\r\n    length: number;\r\n};\r\nexport declare function removeQuotes(str: string): string;\r\n/**\r\n *  wrap text in section tags like <template>, <style>\r\n *  add leading and trailing newline and optional indentation\r\n */\r\nexport declare function indentSection(text: string, options: VLSFormatConfig): string;\r\nexport declare function toMarkupContent(value: string | MarkupContent | undefined): \"\" | MarkupContent;\r\nexport declare function modulePathToValidIdentifier(tsModule: RuntimeLibrary['typescript'], modulePath: string, target: ts.ScriptTarget | undefined): string;\r\n"}}
