{"code":"import cssColors from './css-colors-list';\r\nimport stylus from 'stylus';\r\n/**\r\n * Checks wether node is variable declaration\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isVariableNode(node) {\r\n    return node.__type === 'Ident' && !!node.val && node.val.__type === 'Expression';\r\n}\r\n/**\r\n * Checks wether node is function declaration\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isFunctionNode(node) {\r\n    return node.__type === 'Ident' && !!node.val && node.val.__type === 'Function';\r\n}\r\n/**\r\n * Checks wether node is selector node\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isSelectorNode(node) {\r\n    return node.__type === 'Selector';\r\n}\r\n/**\r\n * Checks wether node is selector call node e.g.:\r\n * {mySelectors}\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isSelectorCallNode(node) {\r\n    return node.__type === 'Call' && node.name === 'Selector';\r\n}\r\n/**\r\n * Checks wether node is at rule\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isAtRuleNode(node) {\r\n    return ['Media', 'Keyframes', 'Atrule', 'Import', 'Require', 'Supports', 'Literal'].indexOf(node.__type) !== -1;\r\n}\r\n/**\r\n * Checks wether node contains color\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport function isColor(node) {\r\n    if (node.__type === 'Ident' && cssColors.indexOf(node.name) >= 0) {\r\n        return true;\r\n    }\r\n    if (node.__type === 'Rgba') {\r\n        return true;\r\n    }\r\n    if (node.__type === 'Call' && ['rgb', 'rgba', 'hsl', 'hsla'].indexOf(node.name) >= 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Parses text editor content and returns ast\r\n * @param {string} text - text editor content\r\n * @return {Object}\r\n */\r\nexport function buildAst(text) {\r\n    try {\r\n        const root = new stylus.Parser(text).parse();\r\n        // root is read only\r\n        const ret = JSON.parse(JSON.stringify(root.toJSON()));\r\n        addScope(ret, 0, []);\r\n        return ret;\r\n    }\r\n    catch (error) {\r\n        console.error(error.stack);\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Add scope info to ast\r\n * @param {StylusNode} root the stylus node\r\n * @param {number} seq the order in parent node's children list, used as scope path segment\r\n * @param {number[]} scope represented as path from root ast, each path segment is seq number\r\n */\r\nfunction addScope(root, seq, scope) {\r\n    if (!root || typeof root !== 'object') {\r\n        return;\r\n    }\r\n    root.__scope = scope;\r\n    if (root.block) {\r\n        const vals = root.block.nodes || [];\r\n        for (let i = 0, l = vals.length; i < l; i++) {\r\n            addScope(vals[i], i, scope.concat(seq));\r\n        }\r\n    }\r\n    if (root.vals) {\r\n        const vals = root.vals;\r\n        for (let i = 0, l = vals.length; i < l; i++) {\r\n            addScope(vals[i], i, scope.concat());\r\n        }\r\n    }\r\n    if (root.segments) {\r\n        for (const seg of root.segments) {\r\n            addScope(seg, seq, scope.concat());\r\n        }\r\n    }\r\n    if (root.expr) {\r\n        addScope(root.expr, seq, scope.concat());\r\n    }\r\n    if (root.nodes) {\r\n        const vals = root.nodes;\r\n        for (let i = 0, l = vals.length; i < l; i++) {\r\n            addScope(vals[i], i, scope.concat());\r\n        }\r\n    }\r\n    if (root.val) {\r\n        addScope(root.val, seq, scope.concat());\r\n    }\r\n}\r\n/**\r\n * Flattens ast and removes useless nodes\r\n * @param {StylusNode} node\r\n * @return {Array}\r\n */\r\nexport function flattenAndFilterAst(node, scope = []) {\r\n    if (!node.__type) {\r\n        return [];\r\n    }\r\n    node['scope'] = scope;\r\n    let nested = [node];\r\n    if (node.nodes) {\r\n        let i = 0;\r\n        for (const child of node.nodes) {\r\n            const newScope = scope.concat(i++);\r\n            nested = nested.concat(flattenAndFilterAst(child, newScope));\r\n        }\r\n    }\r\n    if (node.block) {\r\n        nested = nested.concat(flattenAndFilterAst(node.block, scope));\r\n    }\r\n    return nested;\r\n}\r\nexport function findNodeAtPosition(root, pos, needBlock = false) {\r\n    // DFS: first find leaf node\r\n    const block = root.block;\r\n    let children = [];\r\n    if (block) {\r\n        children = [block]; //needBlock ? [block] : (block.nodes || [])\r\n    }\r\n    if (root.vals) {\r\n        children = children.concat(root.vals);\r\n    }\r\n    if (root.expr) {\r\n        children = children.concat(root.expr.nodes || []);\r\n    }\r\n    if (root.nodes) {\r\n        children = children.concat(root.nodes);\r\n    }\r\n    if (root.val) {\r\n        children.push(root.val);\r\n    }\r\n    for (const child of children) {\r\n        const ret = findNodeAtPosition(child, pos);\r\n        if (ret) {\r\n            return ret;\r\n        }\r\n    }\r\n    if (root.__type === 'Function' && root.lineno === pos.line + 1) {\r\n        return root; // function node column is inconsisten, ignore\r\n    }\r\n    if (root.lineno !== pos.line + 1 || root.column > pos.character + 1) {\r\n        // not in oneline, or root has passed pos\r\n        return null;\r\n    }\r\n    return root;\r\n}\r\n//# sourceMappingURL=parser.js.map","references":["/Users/yoyo930021/git/vetur/server/src/modes/style/stylus/css-colors-list.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/stylus/index.js"],"map":"{\"version\":3,\"file\":\"parser.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/style/stylus/parser.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/style/stylus/parser.d.ts","writeByteOrderMark":false,"text":"import { Position } from 'vscode-languageserver-types';\r\ntype NodeName = 'Ident' | 'Selector' | 'Call' | 'Function' | 'Media' | 'Keyframes' | 'Atrule' | 'Import' | 'Require' | 'Supports' | 'Literal' | 'Group' | 'Root' | 'Block' | 'Expression' | 'Rgba' | 'Property' | 'Object';\r\nexport interface StylusNode {\r\n    __type: NodeName;\r\n    name: NodeName;\r\n    lineno: number;\r\n    column: number;\r\n    segments: StylusNode[];\r\n    expr?: StylusNode;\r\n    val?: StylusNode;\r\n    nodes?: StylusNode[];\r\n    vals?: StylusNode[];\r\n    block?: StylusNode;\r\n    __scope?: number[];\r\n    string?: string;\r\n}\r\n/**\r\n * Checks wether node is variable declaration\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isVariableNode(node: StylusNode): boolean;\r\n/**\r\n * Checks wether node is function declaration\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isFunctionNode(node: StylusNode): boolean;\r\n/**\r\n * Checks wether node is selector node\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isSelectorNode(node: StylusNode): boolean;\r\n/**\r\n * Checks wether node is selector call node e.g.:\r\n * {mySelectors}\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isSelectorCallNode(node: StylusNode): boolean;\r\n/**\r\n * Checks wether node is at rule\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isAtRuleNode(node: StylusNode): boolean;\r\n/**\r\n * Checks wether node contains color\r\n * @param {StylusNode} node\r\n * @return {Boolean}\r\n */\r\nexport declare function isColor(node: StylusNode): boolean;\r\n/**\r\n * Parses text editor content and returns ast\r\n * @param {string} text - text editor content\r\n * @return {Object}\r\n */\r\nexport declare function buildAst(text: string): StylusNode | null;\r\n/**\r\n * Flattens ast and removes useless nodes\r\n * @param {StylusNode} node\r\n * @return {Array}\r\n */\r\nexport declare function flattenAndFilterAst(node: StylusNode, scope?: number[]): StylusNode[];\r\nexport declare function findNodeAtPosition(root: StylusNode, pos: Position, needBlock?: boolean): StylusNode | null;\r\nexport {};\r\n"}}
