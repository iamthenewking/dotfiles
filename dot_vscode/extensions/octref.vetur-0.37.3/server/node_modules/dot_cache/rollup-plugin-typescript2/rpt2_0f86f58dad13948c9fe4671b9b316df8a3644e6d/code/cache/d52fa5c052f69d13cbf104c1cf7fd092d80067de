{"code":"import { platform } from 'os';\r\nimport { isAbsolute, resolve } from 'path';\r\nimport { URI } from 'vscode-uri';\r\n/**\r\n * Vetur mainly deals with paths / uris from two objects\r\n *\r\n * - `TextDocument` from `vscode-languageserver`\r\n * - `SourceFile` from `typescript`\r\n *\r\n * TypeScript Language Service uses `fileName`, which is a file path without scheme.\r\n * Convert them into standard URI by `Uri.file`.\r\n *\r\n * ## `TextDocument.uri`\r\n *\r\n * - macOS / Linux: file:///foo/bar.vue\r\n * - Windows: file:///c%3A/foo/bar.vue (%3A is `:`)\r\n *\r\n * ## `SourceFile.fileName`\r\n *\r\n * - macOS / Linux: /foo/bar.vue\r\n * - Windows: c:/foo/bar.vue\r\n *\r\n * ## vscode-uri\r\n *\r\n * - `Uri.parse`: Takes full URI starting with `file://`\r\n * - `Uri.file`: Takes file path\r\n *\r\n * ### `fsPath` vs `path`\r\n *\r\n * - macOS / Linux:\r\n * ```\r\n * > Uri.parse('file:///foo/bar.vue').fsPath\r\n * '/foo/bar.vue'\r\n * > Uri.parse('file:///foo/bar.vue').path\r\n * '/foo/bar.vue'\r\n * ```\r\n * - Windows\r\n * ```\r\n * > Uri.parse('file:///c%3A/foo/bar.vue').fsPath\r\n * 'c:\\\\foo\\\\bar.vue' (\\\\ escapes to \\)\r\n * > Uri.parse('file:///c%3A/foo/bar.vue').path\r\n * '/c:/foo/bar.vue'\r\n * ```\r\n */\r\nexport function getFileFsPath(documentUri) {\r\n    return URI.parse(documentUri).fsPath;\r\n}\r\nexport function getFilePath(documentUri) {\r\n    const IS_WINDOWS = platform() === 'win32';\r\n    if (IS_WINDOWS) {\r\n        // Windows have a leading slash like /C:/Users/pine\r\n        // vscode-uri use lower-case drive letter\r\n        // https://github.com/microsoft/vscode-uri/blob/95e03c06f87d38f25eda1ae3c343fe5b7eec3f52/src/index.ts#L1017\r\n        return URI.parse(documentUri).path.replace(/^\\/[a-zA-Z]/, (s) => s.slice(1).toLowerCase());\r\n    }\r\n    else {\r\n        return URI.parse(documentUri).path;\r\n    }\r\n}\r\nexport function normalizeFileNameToFsPath(fileName) {\r\n    return URI.file(fileName).fsPath;\r\n}\r\nexport function normalizeFileNameResolve(...paths) {\r\n    return normalizeFileNameToFsPath(resolve(...paths));\r\n}\r\nexport function getPathDepth(filePath, sep) {\r\n    return filePath.split(sep).length;\r\n}\r\nexport function getFsPathToUri(fsPath) {\r\n    return URI.file(fsPath).toString();\r\n}\r\nexport function normalizeAbsolutePath(fsPath, root) {\r\n    return isAbsolute(fsPath) ? normalizeFileNameToFsPath(fsPath) : normalizeFileNameResolve(root, fsPath);\r\n}\r\n//# sourceMappingURL=paths.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-uri/lib/umd/index.d.ts"],"map":"{\"version\":3,\"file\":\"paths.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/paths.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AAEH,MAAM,UAAU,aAAa,CAAC,WAAmB;IAC/C,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,WAAmB;IAC7C,MAAM,UAAU,GAAG,QAAQ,EAAE,KAAK,OAAO,CAAC;IAC1C,IAAI,UAAU,EAAE;QACd,mDAAmD;QACnD,yCAAyC;QACzC,2GAA2G;QAC3G,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;KACpG;SAAM;QACL,OAAO,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;KACpC;AACH,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,QAAgB;IACxD,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,GAAG,KAAe;IACzD,OAAO,yBAAyB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,QAAgB,EAAE,GAAW;IACxD,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,MAAc;IAC3C,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,MAAc,EAAE,IAAY;IAChE,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACzG,CAAC\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/paths.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Vetur mainly deals with paths / uris from two objects\r\n *\r\n * - `TextDocument` from `vscode-languageserver`\r\n * - `SourceFile` from `typescript`\r\n *\r\n * TypeScript Language Service uses `fileName`, which is a file path without scheme.\r\n * Convert them into standard URI by `Uri.file`.\r\n *\r\n * ## `TextDocument.uri`\r\n *\r\n * - macOS / Linux: file:///foo/bar.vue\r\n * - Windows: file:///c%3A/foo/bar.vue (%3A is `:`)\r\n *\r\n * ## `SourceFile.fileName`\r\n *\r\n * - macOS / Linux: /foo/bar.vue\r\n * - Windows: c:/foo/bar.vue\r\n *\r\n * ## vscode-uri\r\n *\r\n * - `Uri.parse`: Takes full URI starting with `file://`\r\n * - `Uri.file`: Takes file path\r\n *\r\n * ### `fsPath` vs `path`\r\n *\r\n * - macOS / Linux:\r\n * ```\r\n * > Uri.parse('file:///foo/bar.vue').fsPath\r\n * '/foo/bar.vue'\r\n * > Uri.parse('file:///foo/bar.vue').path\r\n * '/foo/bar.vue'\r\n * ```\r\n * - Windows\r\n * ```\r\n * > Uri.parse('file:///c%3A/foo/bar.vue').fsPath\r\n * 'c:\\\\foo\\\\bar.vue' (\\\\ escapes to \\)\r\n * > Uri.parse('file:///c%3A/foo/bar.vue').path\r\n * '/c:/foo/bar.vue'\r\n * ```\r\n */\r\nexport declare function getFileFsPath(documentUri: string): string;\r\nexport declare function getFilePath(documentUri: string): string;\r\nexport declare function normalizeFileNameToFsPath(fileName: string): string;\r\nexport declare function normalizeFileNameResolve(...paths: string[]): string;\r\nexport declare function getPathDepth(filePath: string, sep: string): number;\r\nexport declare function getFsPathToUri(fsPath: string): string;\r\nexport declare function normalizeAbsolutePath(fsPath: string, root: string): string;\r\n"}}
