{"code":"/* tslint:disable:max-line-length */\r\nimport { CompletionItem, CompletionItemKind } from 'vscode-languageserver-types';\r\nconst _builtIn = [\r\n    {\r\n        name: 'red(color[, value])',\r\n        desc: 'Return the red component of the given color, or set the red component to the optional second value argument.',\r\n        insertText: 'red'\r\n    },\r\n    {\r\n        name: 'green(color[, value])',\r\n        desc: 'Return the green component of the given color, or set the green component to the optional second value argument.',\r\n        insertText: 'green'\r\n    },\r\n    {\r\n        name: 'blue(color[, value])',\r\n        desc: 'Return the blue component of the given color, or set the blue component to the optional second value argument.',\r\n        insertText: 'blue'\r\n    },\r\n    {\r\n        name: 'alpha(color[, value])',\r\n        desc: 'Return the alpha component of the given color, or set the alpha component to the optional second value argument.',\r\n        insertText: 'alpha'\r\n    },\r\n    {\r\n        name: 'dark(color)',\r\n        desc: 'Check if color is dark:',\r\n        insertText: 'dark'\r\n    },\r\n    {\r\n        name: 'light(color)',\r\n        desc: 'Check if color is light:',\r\n        insertText: 'light'\r\n    },\r\n    {\r\n        name: 'hue(color[, value])',\r\n        desc: 'Return the hue of the given color, or set the hue component to the optional second value argument.',\r\n        insertText: 'hue'\r\n    },\r\n    {\r\n        name: 'saturation(color[, value])',\r\n        desc: 'Return the saturation of the given color, or set the saturation component to the optional second value argument.',\r\n        insertText: 'saturation'\r\n    },\r\n    {\r\n        name: 'lightness(color[, value])',\r\n        desc: 'Return the lightness of the given color, or set the lightness component to the optional second value argument.',\r\n        insertText: 'lightness'\r\n    },\r\n    {\r\n        name: 'push(expr, args…)',\r\n        desc: 'Push the given args to expr.',\r\n        insertText: 'push'\r\n    },\r\n    {\r\n        name: 'pop(expr)',\r\n        desc: 'Pop a value from expr.',\r\n        insertText: 'pop'\r\n    },\r\n    {\r\n        name: 'shift(expr)',\r\n        desc: 'Shift an element from expr.',\r\n        insertText: 'shift'\r\n    },\r\n    {\r\n        name: 'unshift(expr, args…)',\r\n        desc: 'Unshift the given args to expr.',\r\n        insertText: 'unshift'\r\n    },\r\n    {\r\n        name: 'index(list, value)',\r\n        desc: 'Returns the index (zero-based) of a value within a list.',\r\n        insertText: 'index'\r\n    },\r\n    {\r\n        name: 'keys(pairs)',\r\n        desc: 'Return keys in the given pairs:',\r\n        insertText: 'keys'\r\n    },\r\n    {\r\n        name: 'values(pairs)',\r\n        desc: 'Return values in the given pairs:',\r\n        insertText: 'values'\r\n    },\r\n    {\r\n        name: 'list-separator(list)',\r\n        desc: 'Return the separator of the given list.',\r\n        insertText: 'list-separator'\r\n    },\r\n    {\r\n        name: 'typeof(node)',\r\n        desc: 'Return type of node as a string.',\r\n        insertText: 'typeof'\r\n    },\r\n    {\r\n        name: 'unit(unit[, type])',\r\n        desc: 'Return a string for the type of unit or an empty string, or assign the given type without unit conversion.',\r\n        insertText: 'unit'\r\n    },\r\n    {\r\n        name: 'percentage(num)',\r\n        desc: 'Convert a num to a percentage.',\r\n        insertText: 'percentage'\r\n    },\r\n    {\r\n        name: 'abs(unit)',\r\n        desc: '  abs(-5px)\\n  // => 5px\\n\\n  abs(5px)\\n  // => 5px\\n',\r\n        insertText: 'abs'\r\n    },\r\n    {\r\n        name: 'ceil(unit)',\r\n        desc: '  ceil(5.5in)\\n  // => 6in\\n',\r\n        insertText: 'ceil'\r\n    },\r\n    {\r\n        name: 'floor(unit)',\r\n        desc: '  floor(5.6px)\\n  // => 5px\\n',\r\n        insertText: 'floor'\r\n    },\r\n    {\r\n        name: 'round(unit)',\r\n        desc: '  round(5.5px)\\n  // => 6px\\n\\n  round(5.4px)\\n  // => 5px\\n',\r\n        insertText: 'round'\r\n    },\r\n    {\r\n        name: 'sin(angle)',\r\n        desc: 'Returns the value of sine for the given angle. If the angle is given as a degree unit, like 45deg, it is treated as a degree, otherwise it is treated as radians.',\r\n        insertText: 'sin'\r\n    },\r\n    {\r\n        name: 'cos(angle)',\r\n        desc: 'Returns the value of cosine for the given angle. If the angle is given as a degree unit, like 45deg, it is treated as a degree, otherwise it is treated as radians.',\r\n        insertText: 'cos'\r\n    },\r\n    {\r\n        name: 'tan(angle)',\r\n        desc: 'Returns the value of tangent for the given angle. If the angle is given as a degree unit, like 45deg, it is treated as a degree, otherwise it is treated as radians.',\r\n        insertText: 'tan'\r\n    },\r\n    {\r\n        name: 'min(a, b)',\r\n        desc: '  min(1, 5)\\n  // => 1\\n',\r\n        insertText: 'min'\r\n    },\r\n    {\r\n        name: 'max(a, b)',\r\n        desc: '  max(1, 5)\\n  // => 5\\n',\r\n        insertText: 'max'\r\n    },\r\n    {\r\n        name: 'even(unit)',\r\n        desc: '  even(6px)\\n  // => true\\n',\r\n        insertText: 'even'\r\n    },\r\n    {\r\n        name: 'odd(unit)',\r\n        desc: '  odd(5mm)\\n  // => true\\n',\r\n        insertText: 'odd'\r\n    },\r\n    {\r\n        name: 'sum(nums)',\r\n        desc: '  sum(1 2 3)\\n  // => 6\\n',\r\n        insertText: 'sum'\r\n    },\r\n    {\r\n        name: 'avg(nums)',\r\n        desc: ' avg(1 2 3)\\n // => 2\\n',\r\n        insertText: 'avg'\r\n    },\r\n    {\r\n        name: 'range(start, stop[, step])',\r\n        desc: 'Returns a list of units from start to stop (included) by given step. If step argument is omitted, it defaults to 1. The step must not be zero.',\r\n        insertText: 'range'\r\n    },\r\n    {\r\n        name: 'base-convert(num, base, width)',\r\n        desc: 'Returns a Literal num converted to the provided base, padded to width with zeroes (default width is 2)',\r\n        insertText: 'base-convert'\r\n    },\r\n    {\r\n        name: 'match(pattern, string[, flags])',\r\n        desc: 'Retrieves the matches when matching a val(string) against a pattern(regular expression).',\r\n        insertText: 'match'\r\n    },\r\n    {\r\n        name: 'replace(pattern, replacement, val)',\r\n        desc: 'Returns string with all matches of pattern replaced by replacement in given val',\r\n        insertText: 'replace'\r\n    },\r\n    {\r\n        name: 'join(delim, vals…)',\r\n        desc: 'Join the given vals with delim.',\r\n        insertText: 'join'\r\n    },\r\n    {\r\n        name: 'split(delim, val)',\r\n        desc: 'The split()` method splits a string/ident into an array of strings by separating the string into substrings.',\r\n        insertText: 'split'\r\n    },\r\n    {\r\n        name: 'substr(val, start, length)',\r\n        desc: 'The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.',\r\n        insertText: 'substr'\r\n    },\r\n    {\r\n        name: 'slice(val, start[, end])',\r\n        desc: 'The slice() method extracts a section of a string/list and returns a new string/list.',\r\n        insertText: 'slice'\r\n    },\r\n    {\r\n        name: 'hsla(color | h,s,l,a)',\r\n        desc: 'Convert the given color to an HSLA node, or h,s,l,a component values.',\r\n        insertText: 'hsla'\r\n    },\r\n    {\r\n        name: 'hsl(color | h,s,l)',\r\n        desc: 'Convert the given color to an HSLA node, or h,s,l,a component values.',\r\n        insertText: 'hsl'\r\n    },\r\n    {\r\n        name: 'rgba(color | r,g,b,a)',\r\n        desc: 'Return RGBA from the r,g,b,a channels or provide a color to tweak the alpha.',\r\n        insertText: 'rgba'\r\n    },\r\n    {\r\n        name: 'rgb(color | r,g,b)',\r\n        desc: 'Return a RGBA from the r,g,b channels or cast to an RGBA node.',\r\n        insertText: 'rgb'\r\n    },\r\n    {\r\n        name: 'blend(top[, bottom])',\r\n        desc: 'Blends the given top color over the bottom one using the normal blending. The bottom argument is optional and is defaulted to #fff.',\r\n        insertText: 'blend'\r\n    },\r\n    {\r\n        name: 'lighten(color, amount)',\r\n        desc: 'Lighten the given color by amount. This function is unit-sensitive, for example supporting percentages as shown below.',\r\n        insertText: 'lighten'\r\n    },\r\n    {\r\n        name: 'darken(color, amount)',\r\n        desc: 'Darken the given color by amount.This function is unit-sensitive, for example supporting percentages as shown below.',\r\n        insertText: 'darken'\r\n    },\r\n    {\r\n        name: 'desaturate(color, amount)',\r\n        desc: 'Desaturate the given color by amount.',\r\n        insertText: 'desaturate'\r\n    },\r\n    {\r\n        name: 'saturate(color, amount)',\r\n        desc: 'Saturate the given color by amount.',\r\n        insertText: 'saturate'\r\n    },\r\n    {\r\n        name: 'complement(color)',\r\n        desc: 'Gives the complementary color. Equals to spinning hue to 180deg.',\r\n        insertText: 'complement'\r\n    },\r\n    {\r\n        name: 'invert(color)',\r\n        desc: 'Inverts the color. The red, green, and blue values are inverted, while the opacity is left alone.',\r\n        insertText: 'invert'\r\n    },\r\n    {\r\n        name: 'spin(color, amount)',\r\n        desc: 'Spins hue of the given color by amount.',\r\n        insertText: 'spin'\r\n    },\r\n    {\r\n        name: 'grayscale(color)',\r\n        desc: 'Gives the grayscale equivalent of the given color. Equals to desaturate by 100%.',\r\n        insertText: 'grayscale'\r\n    },\r\n    {\r\n        name: 'mix(color1, color2[, amount])',\r\n        desc: 'Mix two colors by a given amount. The amount is optional and is defaulted to 50%.',\r\n        insertText: 'mix'\r\n    },\r\n    {\r\n        name: 'tint(color, amount)',\r\n        desc: 'Mix the given color with white.',\r\n        insertText: 'tint'\r\n    },\r\n    {\r\n        name: 'shade(color, amount)',\r\n        desc: 'Mix the given color with black.',\r\n        insertText: 'shade'\r\n    },\r\n    {\r\n        name: 'luminosity(color)',\r\n        desc: 'Returns the relative luminance of the given color.',\r\n        insertText: 'luminosity'\r\n    },\r\n    {\r\n        name: 'contrast(top[, bottom])',\r\n        desc: 'Returns the contrast ratio object between top and bottom colors, based on script underlying “contrast ratio” tool by Lea Verou.',\r\n        insertText: 'contrast'\r\n    },\r\n    {\r\n        name: 'transparentify(top[, bottom, alpha])',\r\n        desc: 'Returns the transparent version of the given top color, as if it was blend over the given bottom color (or the closest to it, if it is possible).',\r\n        insertText: 'transparentify'\r\n    },\r\n    {\r\n        name: 'unquote(str | ident)',\r\n        desc: 'Unquote the given str and returned as a Literal node.',\r\n        insertText: 'unquote'\r\n    },\r\n    {\r\n        name: 'convert(str)',\r\n        desc: 'Like unquote() but tries to convert the given str to a Stylus node.',\r\n        insertText: 'convert'\r\n    },\r\n    {\r\n        name: 's(fmt, …)',\r\n        desc: 'The s() function is similar to unquote(), in that it returns a Literal node, however it accepts a format string much like C’s sprintf(). Currently the only specifier is %s.',\r\n        insertText: 's'\r\n    },\r\n    {\r\n        name: 'basename(path[, ext])',\r\n        desc: 'Returns the basename of path, (optionally) with ext extension removed.',\r\n        insertText: 'basename'\r\n    },\r\n    {\r\n        name: 'dirname(path)',\r\n        desc: 'Returns the dirname of path.',\r\n        insertText: 'dirname'\r\n    },\r\n    {\r\n        name: 'extname(path)',\r\n        desc: 'Returns the filename extension of path including the dot.',\r\n        insertText: 'extname'\r\n    },\r\n    {\r\n        name: 'pathjoin(…)',\r\n        desc: 'Peform a path join.',\r\n        insertText: 'pathjoin'\r\n    },\r\n    {\r\n        name: 'current-media()',\r\n        desc: \"current-media() function returns the string of the current block’s @media rule or '' if there is no @media above the block.\",\r\n        insertText: 'current-media'\r\n    },\r\n    {\r\n        name: '+cache(keys…)',\r\n        desc: '+cache is a really powerful built-in function that allows you to create your own “cachable” mixins.',\r\n        insertText: '+cache'\r\n    },\r\n    {\r\n        name: '+prefix-classes(prefix)',\r\n        desc: 'Stylus comes with a block mixin prefix-classes that can be used for prefixing the classes inside any given Stylus’ block. For example:',\r\n        insertText: '+prefix-classes'\r\n    },\r\n    {\r\n        name: 'lookup(name)',\r\n        desc: 'Allows to lookup a variable with a given name, passed as a string. Returns null if the variable is undefined.',\r\n        insertText: 'lookup(name)'\r\n    },\r\n    {\r\n        name: 'define(name, expr[, global])',\r\n        desc: 'Allows to create or overwrite a variable with a given name, passed as a string, onto current scope (or global scope if global is true).',\r\n        insertText: 'define'\r\n    },\r\n    {\r\n        name: 'operate(op, left, right)',\r\n        desc: 'Perform the given op on the left and right operands:',\r\n        insertText: 'operate'\r\n    },\r\n    {\r\n        name: 'length([expr])',\r\n        desc: 'Parenthesized expressions may act as tuples, the length() function returns the length of such expressions.',\r\n        insertText: 'length'\r\n    },\r\n    {\r\n        name: 'selector()',\r\n        desc: 'Returns the compiled current selector or & if called at root level.',\r\n        insertText: 'selector'\r\n    },\r\n    {\r\n        name: 'selector-exists(selector)',\r\n        desc: 'Returns true if the given selector exists.',\r\n        insertText: 'selector-exists'\r\n    },\r\n    {\r\n        name: 'warn(msg)',\r\n        desc: 'Warn with the given error msg, does not exit.',\r\n        insertText: 'warn'\r\n    },\r\n    {\r\n        name: 'error(msg)',\r\n        desc: 'Exits with the given error msg.',\r\n        insertText: 'error'\r\n    },\r\n    {\r\n        name: 'last(expr)',\r\n        desc: 'Return the last value in the given expr:',\r\n        insertText: 'last'\r\n    },\r\n    {\r\n        name: 'p(expr)',\r\n        desc: 'Inspect the given expr:',\r\n        insertText: 'p'\r\n    },\r\n    {\r\n        name: 'opposite-position(positions)',\r\n        desc: 'Return the opposites of the given positions.',\r\n        insertText: 'opposite-position'\r\n    },\r\n    {\r\n        name: 'image-size(path)',\r\n        desc: 'Returns the width and height of the image found at path. Lookups are performed in the same manner as @import, altered by the paths setting.',\r\n        insertText: 'image-size'\r\n    },\r\n    {\r\n        name: 'embedurl(path[, encoding])',\r\n        desc: 'Returns an inline image as a url() literal, encoded with encoding (available encodings: base64 (default), and utf8).',\r\n        insertText: 'embedurl'\r\n    },\r\n    {\r\n        name: 'add-property(name, expr)',\r\n        desc: 'Adds property name, with the given expr to the closest block.',\r\n        insertText: 'add-property'\r\n    },\r\n    {\r\n        name: 'json(path[, options])',\r\n        desc: 'Convert a .json file into stylus variables or an object. Nested variable object keys are joined with a dash (-).',\r\n        insertText: 'json'\r\n    },\r\n    {\r\n        name: 'use(path)',\r\n        desc: 'You can use any given js-plugin at given path with use() function right inside your ‘.styl’ files, like this:',\r\n        insertText: 'use'\r\n    }\r\n];\r\nconst builtIn = _builtIn.map(item => {\r\n    const completionItem = CompletionItem.create(item.insertText);\r\n    completionItem.detail = item.name;\r\n    completionItem.insertText = item.insertText;\r\n    completionItem.documentation = item.desc;\r\n    completionItem.kind = CompletionItemKind.Function;\r\n    return completionItem;\r\n});\r\nexport default builtIn;\r\n//# sourceMappingURL=built-in.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts"],"map":"{\"version\":3,\"file\":\"built-in.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/style/stylus/built-in.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/style/stylus/built-in.d.ts","writeByteOrderMark":false,"text":"import { CompletionItem } from 'vscode-languageserver-types';\r\ndeclare const builtIn: CompletionItem[];\r\nexport default builtIn;\r\n"}}
