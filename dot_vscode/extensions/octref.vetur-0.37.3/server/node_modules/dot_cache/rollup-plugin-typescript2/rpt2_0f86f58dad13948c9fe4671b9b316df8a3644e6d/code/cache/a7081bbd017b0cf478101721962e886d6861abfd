{"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CodeActionKind } from 'vscode-languageserver';\r\n/* tslint:disable:variable-name */\r\nconst Extract_Function = Object.freeze({\r\n    kind: CodeActionKind.RefactorExtract + '.function',\r\n    matches: refactor => refactor.actionName.startsWith('function_')\r\n});\r\nconst Extract_Constant = Object.freeze({\r\n    kind: CodeActionKind.RefactorExtract + '.constant',\r\n    matches: refactor => refactor.actionName.startsWith('constant_')\r\n});\r\nconst Extract_Type = Object.freeze({\r\n    kind: CodeActionKind.RefactorExtract + '.type',\r\n    matches: refactor => refactor.actionName.startsWith('Extract to type alias')\r\n});\r\nconst Extract_Interface = Object.freeze({\r\n    kind: CodeActionKind.RefactorExtract + '.interface',\r\n    matches: refactor => refactor.actionName.startsWith('Extract to interface')\r\n});\r\nconst Move_NewFile = Object.freeze({\r\n    kind: CodeActionKind.Refactor + '.move' + '.newFile',\r\n    matches: refactor => refactor.actionName.startsWith('Move to a new file')\r\n});\r\nconst Rewrite_Import = Object.freeze({\r\n    kind: CodeActionKind.RefactorRewrite + '.import',\r\n    matches: refactor => refactor.actionName.startsWith('Convert namespace import') ||\r\n        refactor.actionName.startsWith('Convert named imports')\r\n});\r\nconst Rewrite_Export = Object.freeze({\r\n    kind: CodeActionKind.RefactorRewrite + '.export',\r\n    matches: refactor => refactor.actionName.startsWith('Convert default export') || refactor.actionName.startsWith('Convert named export')\r\n});\r\nconst Rewrite_Arrow_Braces = Object.freeze({\r\n    kind: CodeActionKind.RefactorRewrite + '.arrow' + '.braces',\r\n    matches: refactor => refactor.actionName.startsWith('Convert default export') || refactor.actionName.startsWith('Convert named export')\r\n});\r\nconst Rewrite_Parameters_ToDestructured = Object.freeze({\r\n    kind: CodeActionKind.RefactorRewrite + '.parameters' + '.toDestructured',\r\n    matches: refactor => refactor.actionName.startsWith('Convert parameters to destructured object')\r\n});\r\nconst Rewrite_Property_GenerateAccessors = Object.freeze({\r\n    kind: CodeActionKind.RefactorRewrite + '.property' + '.generateAccessors',\r\n    matches: refactor => refactor.actionName.startsWith(\"Generate 'get' and 'set' accessors\")\r\n});\r\n/* tslint:enable:variable-name */\r\nconst allKnownCodeActionKinds = [\r\n    Extract_Function,\r\n    Extract_Constant,\r\n    Extract_Type,\r\n    Extract_Interface,\r\n    Move_NewFile,\r\n    Rewrite_Import,\r\n    Rewrite_Export,\r\n    Rewrite_Arrow_Braces,\r\n    Rewrite_Parameters_ToDestructured,\r\n    Rewrite_Property_GenerateAccessors\r\n];\r\nexport function getCodeActionKind(refactor) {\r\n    var _a, _b;\r\n    return (_b = (_a = allKnownCodeActionKinds.find(kind => kind.matches(refactor))) === null || _a === void 0 ? void 0 : _a.kind) !== null && _b !== void 0 ? _b : CodeActionKind.Refactor;\r\n}\r\n//# sourceMappingURL=CodeActionKindConverter.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver/lib/common/api.d.ts"],"map":"{\"version\":3,\"file\":\"CodeActionKindConverter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modes/script/CodeActionKindConverter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/script/CodeActionKindConverter.d.ts","writeByteOrderMark":false,"text":"import { CodeActionKind } from 'vscode-languageserver';\r\nexport interface TSCodeActionKind {\r\n    kind: CodeActionKind;\r\n    matches(refactor: {\r\n        actionName: string;\r\n    }): boolean;\r\n}\r\nexport declare function getCodeActionKind(refactor: {\r\n    actionName: string;\r\n}): CodeActionKind;\r\n"}}
