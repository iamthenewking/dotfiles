{"code":"import { TextEdit } from 'vscode-css-languageservice';\r\nimport { SassFormatter } from 'sass-formatter';\r\nimport * as emmet from 'vscode-emmet-helper';\r\nimport { StylePriority } from '../emmet';\r\nexport class SassLanguageMode {\r\n    constructor(env) {\r\n        this.env = env;\r\n    }\r\n    getId() {\r\n        return 'sass';\r\n    }\r\n    doComplete(document, position) {\r\n        const emmetCompletions = emmet.doComplete(document, position, 'sass', this.env.getConfig().emmet);\r\n        if (!emmetCompletions) {\r\n            return { isIncomplete: false, items: [] };\r\n        }\r\n        else {\r\n            const emmetItems = emmetCompletions.items.map(i => {\r\n                return Object.assign(Object.assign({}, i), { sortText: StylePriority.Emmet + i.label });\r\n            });\r\n            return {\r\n                isIncomplete: emmetCompletions.isIncomplete,\r\n                items: emmetItems\r\n            };\r\n        }\r\n    }\r\n    format(document, range, formattingOptions) {\r\n        var _a, _b;\r\n        if (this.env.getConfig().vetur.format.defaultFormatter.sass === 'sass-formatter') {\r\n            return [\r\n                TextEdit.replace(range, SassFormatter.Format(document.getText(range), Object.assign(Object.assign({}, formattingOptions), (_b = (_a = this.env.getConfig()) === null || _a === void 0 ? void 0 : _a.sass) === null || _b === void 0 ? void 0 : _b.format)))\r\n            ];\r\n        }\r\n        return [];\r\n    }\r\n    onDocumentRemoved(document) { }\r\n    dispose() { }\r\n}\r\n//# sourceMappingURL=sassLanguageMode.js.map","references":["/Users/yoyo930021/git/vetur/server/src/embeddedSupport/languageModes.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-css-languageservice/lib/umd/cssLanguageService.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/sass-formatter/dist/index.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-emmet-helper/lib/cjs/emmetHelper.d.ts","/Users/yoyo930021/git/vetur/server/src/modes/style/emmet.ts","/Users/yoyo930021/git/vetur/server/src/services/EnvironmentService.ts"],"map":"{\"version\":3,\"file\":\"sassLanguageMode.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/style/sass/sassLanguageMode.ts\"],\"names\":[],\"mappings\":\"AAKA,OAAO,EAAE,QAAQ,EAAY,MAAM,4BAA4B,CAAC;AAEhE,OAAO,EAAE,aAAa,EAAuB,MAAM,gBAAgB,CAAC;AAEpE,OAAO,KAAK,KAAK,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAGzC,MAAM,OAAO,gBAAgB;IAC3B,YAAoB,GAAuB;QAAvB,QAAG,GAAH,GAAG,CAAoB;IAAG,CAAC;IAE/C,KAAK;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,UAAU,CAAC,QAAsB,EAAE,QAAkB;QACnD,MAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC;QAClG,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;SAC3C;aAAM;YACL,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAChD,uCACK,CAAC,KACJ,QAAQ,EAAE,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IACvC;YACJ,CAAC,CAAC,CAAC;YACH,OAAO;gBACL,YAAY,EAAE,gBAAgB,CAAC,YAAY;gBAC3C,KAAK,EAAE,UAAU;aAClB,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,QAAsB,EAAE,KAAY,EAAE,iBAAoC;;QAC/E,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,KAAK,gBAAgB,EAAE;YAChF,OAAO;gBACL,QAAQ,CAAC,OAAO,CACd,KAAK,EACL,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,kCAAO,iBAAiB,GAAK,MAAA,MAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,0CAAE,IAAI,0CAAE,MAAM,EAAG,CAC/G;aACF,CAAC;SACH;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,iBAAiB,CAAC,QAAsB,IAAG,CAAC;IAC5C,OAAO,KAAI,CAAC;CACb\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/style/sass/sassLanguageMode.d.ts","writeByteOrderMark":false,"text":"import { LanguageMode } from '../../../embeddedSupport/languageModes';\r\nimport type { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport { Range, FormattingOptions, CompletionList } from 'vscode-languageserver-types';\r\nimport { TextEdit, Position } from 'vscode-css-languageservice';\r\nimport { EnvironmentService } from '../../../services/EnvironmentService';\r\nexport declare class SassLanguageMode implements LanguageMode {\r\n    private env;\r\n    constructor(env: EnvironmentService);\r\n    getId(): string;\r\n    doComplete(document: TextDocument, position: Position): CompletionList;\r\n    format(document: TextDocument, range: Range, formattingOptions: FormattingOptions): TextEdit[];\r\n    onDocumentRemoved(document: TextDocument): void;\r\n    dispose(): void;\r\n}\r\n"}}
