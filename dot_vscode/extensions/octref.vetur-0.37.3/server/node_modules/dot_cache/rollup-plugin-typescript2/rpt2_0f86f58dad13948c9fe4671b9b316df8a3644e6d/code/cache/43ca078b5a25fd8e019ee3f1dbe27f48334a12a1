{"code":"import { SnippetManager } from './snippets';\r\nimport { Range } from 'vscode-css-languageservice';\r\nexport function getVueMode(env, globalSnippetDir) {\r\n    const snippetManager = new SnippetManager(env.getSnippetFolder(), globalSnippetDir);\r\n    const scaffoldSnippetSources = {\r\n        workspace: 'üíº',\r\n        user: 'üóíÔ∏è',\r\n        vetur: '‚úå'\r\n    };\r\n    return {\r\n        getId() {\r\n            return 'vue';\r\n        },\r\n        doComplete(document, position) {\r\n            const scaffoldSnippetSources = env.getConfig().vetur.completion.scaffoldSnippetSources;\r\n            if (scaffoldSnippetSources['workspace'] === '' &&\r\n                scaffoldSnippetSources['user'] === '' &&\r\n                scaffoldSnippetSources['vetur'] === '') {\r\n                return { isIncomplete: false, items: [] };\r\n            }\r\n            const offset = document.offsetAt(position);\r\n            const lines = document.getText().slice(0, offset).split('\\n');\r\n            const currentLine = lines[position.line];\r\n            const items = snippetManager ? snippetManager.completeSnippets(scaffoldSnippetSources) : [];\r\n            // If a line starts with `<`, it's probably a starting region tag that can be wholly replaced\r\n            if (currentLine.length > 0 && currentLine.startsWith('<')) {\r\n                const replacementRange = Range.create(document.positionAt(offset - currentLine.length), document.positionAt(offset));\r\n                items.forEach(i => {\r\n                    if (i.insertText) {\r\n                        i.textEdit = {\r\n                            newText: i.insertText,\r\n                            range: replacementRange\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n            return {\r\n                isIncomplete: false,\r\n                items\r\n            };\r\n        },\r\n        onDocumentRemoved() { },\r\n        dispose() { }\r\n    };\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Users/yoyo930021/git/vetur/server/src/embeddedSupport/languageModes.ts","/Users/yoyo930021/git/vetur/server/src/modes/vue/snippets.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-css-languageservice/lib/umd/cssLanguageService.d.ts","/Users/yoyo930021/git/vetur/server/src/services/EnvironmentService.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modes/vue/index.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,cAAc,EAA0B,MAAM,YAAY,CAAC;AACpE,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAGnD,MAAM,UAAU,UAAU,CAAC,GAAuB,EAAE,gBAAyB;IAC3E,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACpF,MAAM,sBAAsB,GAA2B;QACrD,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,GAAG;KACX,CAAC;IAEF,OAAO;QACL,KAAK;YACH,OAAO,KAAK,CAAC;QACf,CAAC;QACD,UAAU,CAAC,QAAQ,EAAE,QAAQ;YAC3B,MAAM,sBAAsB,GAA2B,GAAG,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,sBAAsB,CAAC;YAE/G,IACE,sBAAsB,CAAC,WAAW,CAAC,KAAK,EAAE;gBAC1C,sBAAsB,CAAC,MAAM,CAAC,KAAK,EAAE;gBACrC,sBAAsB,CAAC,OAAO,CAAC,KAAK,EAAE,EACtC;gBACA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;aAC3C;YAED,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEzC,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAE5F,6FAA6F;YAC7F,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACzD,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CACnC,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,EAChD,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAC5B,CAAC;gBACF,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAChB,IAAI,CAAC,CAAC,UAAU,EAAE;wBAChB,CAAC,CAAC,QAAQ,GAAG;4BACX,OAAO,EAAE,CAAC,CAAC,UAAU;4BACrB,KAAK,EAAE,gBAAgB;yBACxB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;aACJ;YAED,OAAO;gBACL,YAAY,EAAE,KAAK;gBACnB,KAAK;aACN,CAAC;QACJ,CAAC;QACD,iBAAiB,KAAI,CAAC;QACtB,OAAO,KAAI,CAAC;KACb,CAAC;AACJ,CAAC\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/vue/index.d.ts","writeByteOrderMark":false,"text":"import { LanguageMode } from '../../embeddedSupport/languageModes';\r\nimport { EnvironmentService } from '../../services/EnvironmentService';\r\nexport declare function getVueMode(env: EnvironmentService, globalSnippetDir?: string): LanguageMode;\r\n"}}
