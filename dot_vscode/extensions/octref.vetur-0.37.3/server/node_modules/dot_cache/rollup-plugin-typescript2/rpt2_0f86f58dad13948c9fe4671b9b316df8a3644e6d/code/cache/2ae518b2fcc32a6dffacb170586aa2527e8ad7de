{"code":"import { HtmlTokenType, createScanner } from '../parser/htmlScanner';\r\nimport { Range } from 'vscode-languageserver-types';\r\nimport { URI } from 'vscode-uri';\r\nfunction stripQuotes(url) {\r\n    return url.replace(/^'([^']*)'$/, (substr, match1) => match1).replace(/^\"([^\"]*)\"$/, (substr, match1) => match1);\r\n}\r\nfunction getWorkspaceUrl(modelAbsoluteUri, tokenContent, documentContext, base) {\r\n    if (/^\\s*javascript\\:/i.test(tokenContent) || /^\\s*\\#/i.test(tokenContent) || /[\\n\\r]/.test(tokenContent)) {\r\n        return null;\r\n    }\r\n    tokenContent = tokenContent.replace(/^\\s*/g, '');\r\n    if (/^https?:\\/\\//i.test(tokenContent) || /^file:\\/\\//i.test(tokenContent)) {\r\n        // Absolute link that needs no treatment\r\n        return tokenContent;\r\n    }\r\n    if (/^\\/\\//i.test(tokenContent)) {\r\n        // Absolute link (that does not name the protocol)\r\n        let pickedScheme = 'http';\r\n        if (modelAbsoluteUri.scheme === 'https') {\r\n            pickedScheme = 'https';\r\n        }\r\n        return pickedScheme + ':' + tokenContent.replace(/^\\s*/g, '');\r\n    }\r\n    if (documentContext) {\r\n        return documentContext.resolveReference(tokenContent, base);\r\n    }\r\n    return tokenContent;\r\n}\r\nfunction createLink(document, documentContext, attributeValue, startOffset, endOffset, base) {\r\n    const documentUri = URI.parse(document.uri);\r\n    const tokenContent = stripQuotes(attributeValue);\r\n    if (tokenContent.length === 0) {\r\n        return null;\r\n    }\r\n    if (tokenContent.length < attributeValue.length) {\r\n        startOffset++;\r\n        endOffset--;\r\n    }\r\n    const workspaceUrl = getWorkspaceUrl(documentUri, tokenContent, documentContext, base);\r\n    if (!workspaceUrl || !isValidURI(workspaceUrl)) {\r\n        return null;\r\n    }\r\n    return {\r\n        range: Range.create(document.positionAt(startOffset), document.positionAt(endOffset)),\r\n        target: workspaceUrl\r\n    };\r\n}\r\nfunction isValidURI(uri) {\r\n    try {\r\n        URI.parse(uri);\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        console.error(e.stack);\r\n        return false;\r\n    }\r\n}\r\nexport function findDocumentLinks(document, documentContext) {\r\n    const newLinks = [];\r\n    const scanner = createScanner(document.getText(), 0);\r\n    let token = scanner.scan();\r\n    let afterHrefOrSrc = false;\r\n    let afterBase = false;\r\n    let base = undefined;\r\n    while (token !== HtmlTokenType.EOS) {\r\n        switch (token) {\r\n            case HtmlTokenType.StartTag:\r\n                if (!base) {\r\n                    const tagName = scanner.getTokenText().toLowerCase();\r\n                    afterBase = tagName === 'base';\r\n                }\r\n                break;\r\n            case HtmlTokenType.AttributeName:\r\n                const attributeName = scanner.getTokenText().toLowerCase();\r\n                afterHrefOrSrc = attributeName === 'src' || attributeName === 'href';\r\n                break;\r\n            case HtmlTokenType.AttributeValue:\r\n                if (afterHrefOrSrc) {\r\n                    const attributeValue = scanner.getTokenText();\r\n                    const link = createLink(document, documentContext, attributeValue, scanner.getTokenOffset(), scanner.getTokenEnd(), base);\r\n                    if (link) {\r\n                        newLinks.push(link);\r\n                    }\r\n                    if (afterBase && typeof base === 'undefined') {\r\n                        base = stripQuotes(attributeValue);\r\n                    }\r\n                    afterBase = false;\r\n                    afterHrefOrSrc = false;\r\n                }\r\n                break;\r\n        }\r\n        token = scanner.scan();\r\n    }\r\n    return newLinks;\r\n}\r\n//# sourceMappingURL=htmlLinks.js.map","references":["/Users/yoyo930021/git/vetur/server/src/modes/template/parser/htmlScanner.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-uri/lib/umd/index.d.ts","/Users/yoyo930021/git/vetur/server/src/types.ts"],"map":"{\"version\":3,\"file\":\"htmlLinks.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/template/services/htmlLinks.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/template/services/htmlLinks.d.ts","writeByteOrderMark":false,"text":"import { DocumentLink } from 'vscode-languageserver-types';\r\nimport type { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport { DocumentContext } from '../../../types';\r\nexport declare function findDocumentLinks(document: TextDocument, documentContext: DocumentContext): DocumentLink[];\r\n"}}
