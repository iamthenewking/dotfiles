{"code":"export var CodeActionDataKind;\r\n(function (CodeActionDataKind) {\r\n    CodeActionDataKind[CodeActionDataKind[\"CombinedCodeFix\"] = 0] = \"CombinedCodeFix\";\r\n    CodeActionDataKind[CodeActionDataKind[\"RefactorAction\"] = 1] = \"RefactorAction\";\r\n    CodeActionDataKind[CodeActionDataKind[\"OrganizeImports\"] = 2] = \"OrganizeImports\";\r\n})(CodeActionDataKind || (CodeActionDataKind = {}));\r\n//# sourceMappingURL=types.js.map","references":["/Users/yoyo930021/git/vetur/server/src/embeddedSupport/embeddedSupport.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/types.ts\"],\"names\":[],\"mappings\":\"AAMA,MAAM,CAAN,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,iFAAe,CAAA;IACf,+EAAc,CAAA;IACd,iFAAe,CAAA;AACjB,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/types.d.ts","writeByteOrderMark":false,"text":"import { LanguageId } from './embeddedSupport/embeddedSupport';\r\nexport interface DocumentContext {\r\n    resolveReference(ref: string, base?: string): string;\r\n}\r\nexport declare enum CodeActionDataKind {\r\n    CombinedCodeFix = 0,\r\n    RefactorAction = 1,\r\n    OrganizeImports = 2\r\n}\r\nexport interface BaseCodeActionData {\r\n    uri: string;\r\n    languageId: LanguageId;\r\n    kind: CodeActionDataKind;\r\n    textRange: {\r\n        pos: number;\r\n        end: number;\r\n    };\r\n}\r\nexport interface RefactorActionData extends BaseCodeActionData {\r\n    kind: CodeActionDataKind.RefactorAction;\r\n    refactorName: string;\r\n    actionName: string;\r\n    description: string;\r\n    notApplicableReason?: string;\r\n}\r\nexport interface CombinedFixActionData extends BaseCodeActionData {\r\n    kind: CodeActionDataKind.CombinedCodeFix;\r\n    fixId: {};\r\n}\r\nexport interface OrganizeImportsActionData extends BaseCodeActionData {\r\n    kind: CodeActionDataKind.OrganizeImports;\r\n}\r\nexport type CodeActionData = RefactorActionData | CombinedFixActionData | OrganizeImportsActionData;\r\ninterface SemanticTokenClassification {\r\n    classificationType: number;\r\n    modifierSet: number;\r\n}\r\nexport interface SemanticTokenData extends SemanticTokenClassification {\r\n    line: number;\r\n    character: number;\r\n    length: number;\r\n}\r\nexport interface SemanticTokenOffsetData extends SemanticTokenClassification {\r\n    start: number;\r\n    length: number;\r\n}\r\nexport {};\r\n"}}
