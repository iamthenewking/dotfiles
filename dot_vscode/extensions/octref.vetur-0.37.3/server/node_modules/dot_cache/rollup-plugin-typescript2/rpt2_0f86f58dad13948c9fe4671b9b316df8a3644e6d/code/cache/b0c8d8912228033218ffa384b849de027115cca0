{"code":"import { URI } from 'vscode-uri';\r\nimport { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport parseGitIgnore from 'parse-gitignore';\r\nimport { createUpdater, parseVueScript } from './preprocess';\r\nimport { getFileFsPath, getFilePath, normalizeFileNameToFsPath } from '../../utils/paths';\r\nimport * as bridge from './bridge';\r\nimport { getVueSys } from './vueSys';\r\nimport { stringifySourceMapNodes } from './sourceMap';\r\nimport { isVirtualVueTemplateFile, isVueFile } from './util';\r\nimport { logger } from '../../log';\r\nimport { ModuleResolutionCache } from './moduleResolutionCache';\r\nimport { globalScope } from './transformTemplate';\r\nimport { VueVersion } from '../../utils/vueVersion';\r\nimport { dirname } from 'path';\r\nimport { flatten } from 'lodash';\r\nconst NEWLINE = process.platform === 'win32' ? '\\r\\n' : '\\n';\r\n/**\r\n * For prop validation\r\n */\r\nconst allChildComponentsInfo = new Map();\r\nfunction patchTS(tsModule) {\r\n    // Patch typescript functions to insert `import Vue from 'vue'` and `new Vue` around export default.\r\n    // NOTE: this is a global hack that all ts instances after is changed\r\n    const { createLanguageServiceSourceFile, updateLanguageServiceSourceFile } = createUpdater(tsModule, allChildComponentsInfo);\r\n    tsModule.createLanguageServiceSourceFile = createLanguageServiceSourceFile;\r\n    tsModule.updateLanguageServiceSourceFile = updateLanguageServiceSourceFile;\r\n}\r\nfunction getDefaultCompilerOptions(tsModule) {\r\n    const defaultCompilerOptions = {\r\n        allowNonTsExtensions: true,\r\n        allowJs: true,\r\n        lib: ['lib.dom.d.ts', 'lib.es2017.d.ts'],\r\n        target: tsModule.ScriptTarget.Latest,\r\n        moduleResolution: tsModule.ModuleResolutionKind.NodeJs,\r\n        module: tsModule.ModuleKind.CommonJS,\r\n        jsx: tsModule.JsxEmit.Preserve,\r\n        allowSyntheticDefaultImports: true,\r\n        experimentalDecorators: true\r\n    };\r\n    return defaultCompilerOptions;\r\n}\r\nexport const templateSourceMap = {};\r\n/**\r\n * Manges 4 set of files\r\n *\r\n * - `vue` files in workspace\r\n * - `js/ts` files in workspace\r\n * - `vue` files in `node_modules`\r\n * - `js/ts` files in `node_modules`\r\n */\r\nexport function getServiceHost(tsModule, env, updatedScriptRegionDocuments) {\r\n    patchTS(tsModule);\r\n    let currentScriptDoc;\r\n    // host variable\r\n    let vueVersion = env.getVueVersion();\r\n    let projectVersion = 1;\r\n    let versions = new Map();\r\n    let localScriptRegionDocuments = new Map();\r\n    let nodeModuleSnapshots = new Map();\r\n    let projectFileSnapshots = new Map();\r\n    let moduleResolutionCache = new ModuleResolutionCache();\r\n    let parsedConfig;\r\n    let scriptFileNameSet;\r\n    let vueSys;\r\n    let compilerOptions;\r\n    let jsHost;\r\n    let templateHost;\r\n    let registry;\r\n    let jsLanguageService;\r\n    let templateLanguageService;\r\n    init();\r\n    function getCompilerOptions() {\r\n        const compilerOptions = Object.assign(Object.assign({}, getDefaultCompilerOptions(tsModule)), parsedConfig.options);\r\n        compilerOptions.allowNonTsExtensions = true;\r\n        return compilerOptions;\r\n    }\r\n    function init() {\r\n        vueVersion = env.getVueVersion();\r\n        projectVersion = 1;\r\n        versions = new Map();\r\n        localScriptRegionDocuments = new Map();\r\n        nodeModuleSnapshots = new Map();\r\n        projectFileSnapshots = new Map();\r\n        moduleResolutionCache = new ModuleResolutionCache();\r\n        parsedConfig = getParsedConfig(tsModule, env.getProjectRoot(), env.getTsConfigPath());\r\n        const initialProjectFiles = parsedConfig.fileNames;\r\n        logger.logDebug(`Initializing ServiceHost with ${initialProjectFiles.length} files: ${JSON.stringify(initialProjectFiles)}`);\r\n        scriptFileNameSet = new Set(initialProjectFiles);\r\n        vueSys = getVueSys(tsModule, scriptFileNameSet);\r\n        compilerOptions = getCompilerOptions();\r\n        jsHost = createLanguageServiceHost(compilerOptions);\r\n        templateHost = createLanguageServiceHost(Object.assign(Object.assign({}, compilerOptions), { noUnusedLocals: false, noUnusedParameters: false, allowJs: true, checkJs: true }));\r\n        registry = tsModule.createDocumentRegistry(true);\r\n        jsLanguageService = tsModule.createLanguageService(jsHost, registry);\r\n        templateLanguageService = patchTemplateService(tsModule.createLanguageService(templateHost, registry));\r\n    }\r\n    function queryVirtualFileInfo(fileName, currFileText) {\r\n        const program = templateLanguageService.getProgram();\r\n        if (program) {\r\n            const tsVirtualFile = program.getSourceFile(fileName + '.template');\r\n            if (tsVirtualFile) {\r\n                return {\r\n                    source: tsVirtualFile.getText(),\r\n                    sourceMapNodesString: stringifySourceMapNodes(templateSourceMap[fileName], currFileText, tsVirtualFile.getText())\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            source: '',\r\n            sourceMapNodesString: ''\r\n        };\r\n    }\r\n    function updateCurrentVirtualVueTextDocument(doc, childComponents) {\r\n        var _a;\r\n        const fileFsPath = getFileFsPath(doc.uri);\r\n        const filePath = getFilePath(doc.uri);\r\n        // When file is not in language service, add it\r\n        if (!localScriptRegionDocuments.has(fileFsPath)) {\r\n            if (fileFsPath.endsWith('.vue') || fileFsPath.endsWith('.vue.template')) {\r\n                scriptFileNameSet.add(filePath);\r\n            }\r\n        }\r\n        if (isVirtualVueTemplateFile(fileFsPath)) {\r\n            const oldDocVersion = (_a = localScriptRegionDocuments.get(fileFsPath)) === null || _a === void 0 ? void 0 : _a.version;\r\n            scriptFileNameSet.add(filePath);\r\n            if (childComponents) {\r\n                allChildComponentsInfo.set(filePath, childComponents);\r\n            }\r\n            if (oldDocVersion !== doc.version) {\r\n                localScriptRegionDocuments.set(fileFsPath, doc);\r\n                versions.set(fileFsPath, (versions.get(fileFsPath) || 0) + 1);\r\n                projectVersion++;\r\n            }\r\n        }\r\n        return {\r\n            templateService: templateLanguageService,\r\n            templateSourceMap\r\n        };\r\n    }\r\n    function updateCurrentVueTextDocument(doc) {\r\n        const fileFsPath = getFileFsPath(doc.uri);\r\n        const filePath = getFilePath(doc.uri);\r\n        // When file is not in language service, add it\r\n        if (!localScriptRegionDocuments.has(fileFsPath)) {\r\n            if (fileFsPath.endsWith('.vue') || fileFsPath.endsWith('.vue.template')) {\r\n                scriptFileNameSet.add(filePath);\r\n            }\r\n        }\r\n        if (!currentScriptDoc || doc.uri !== currentScriptDoc.uri || doc.version !== currentScriptDoc.version) {\r\n            currentScriptDoc = updatedScriptRegionDocuments.refreshAndGet(doc);\r\n            const localLastDoc = localScriptRegionDocuments.get(fileFsPath);\r\n            if (localLastDoc && currentScriptDoc.languageId !== localLastDoc.languageId) {\r\n                // if languageId changed, restart the language service; it can't handle file type changes\r\n                jsLanguageService.dispose();\r\n                jsLanguageService = tsModule.createLanguageService(jsHost);\r\n            }\r\n            localScriptRegionDocuments.set(fileFsPath, currentScriptDoc);\r\n            scriptFileNameSet.add(filePath);\r\n            versions.set(fileFsPath, (versions.get(fileFsPath) || 0) + 1);\r\n            projectVersion++;\r\n        }\r\n        return {\r\n            service: jsLanguageService,\r\n            scriptDoc: currentScriptDoc\r\n        };\r\n    }\r\n    // External Documents: JS/TS, non Vue documents\r\n    function updateExternalDocument(fileFsPath) {\r\n        // reload `tsconfig.json` or vue version changed\r\n        if (fileFsPath === env.getTsConfigPath() || vueVersion !== env.getVueVersion()) {\r\n            logger.logInfo(`refresh ts language service when ${fileFsPath} changed.`);\r\n            init();\r\n            return;\r\n        }\r\n        // respect tsconfig\r\n        // use *internal* function\r\n        const configFileSpecs = parsedConfig.configFileSpecs;\r\n        const isExcludedFile = tsModule.isExcludedFile;\r\n        if (isExcludedFile &&\r\n            configFileSpecs &&\r\n            isExcludedFile(fileFsPath, configFileSpecs, env.getProjectRoot(), true, env.getProjectRoot())) {\r\n            return;\r\n        }\r\n        logger.logInfo(`update ${fileFsPath} in ts language service.`);\r\n        const ver = versions.get(fileFsPath) || 0;\r\n        versions.set(fileFsPath, ver + 1);\r\n        projectVersion++;\r\n        // Clear cache so we read the js/ts file from file system again\r\n        if (projectFileSnapshots.has(fileFsPath)) {\r\n            projectFileSnapshots.delete(fileFsPath);\r\n        }\r\n    }\r\n    function getFileNames() {\r\n        return Array.from(scriptFileNameSet);\r\n    }\r\n    function createLanguageServiceHost(options) {\r\n        return {\r\n            getProjectVersion: () => projectVersion.toString(),\r\n            getCompilationSettings: () => options,\r\n            getScriptFileNames: () => Array.from(scriptFileNameSet),\r\n            getScriptVersion(fileName) {\r\n                if (fileName.includes('node_modules')) {\r\n                    return '0';\r\n                }\r\n                if (fileName === bridge.fileName) {\r\n                    return '0';\r\n                }\r\n                const normalizedFileFsPath = normalizeFileNameToFsPath(fileName);\r\n                const version = versions.get(normalizedFileFsPath);\r\n                return version ? version.toString() : '0';\r\n            },\r\n            getScriptKind(fileName) {\r\n                if (fileName.includes('node_modules')) {\r\n                    return tsModule.getScriptKindFromFileName(fileName);\r\n                }\r\n                if (isVueFile(fileName)) {\r\n                    const uri = URI.file(fileName);\r\n                    const fileFsPath = normalizeFileNameToFsPath(fileName);\r\n                    let doc = localScriptRegionDocuments.get(fileFsPath);\r\n                    if (!doc) {\r\n                        doc = updatedScriptRegionDocuments.refreshAndGet(TextDocument.create(uri.toString(), 'vue', 0, tsModule.sys.readFile(fileName) || ''));\r\n                        localScriptRegionDocuments.set(fileFsPath, doc);\r\n                        scriptFileNameSet.add(fileName);\r\n                    }\r\n                    return getScriptKind(tsModule, doc.languageId);\r\n                }\r\n                else if (isVirtualVueTemplateFile(fileName)) {\r\n                    return tsModule.ScriptKind.TS;\r\n                }\r\n                else {\r\n                    if (fileName === bridge.fileName) {\r\n                        return tsModule.ScriptKind.TS;\r\n                    }\r\n                    // NOTE: Typescript 2.3 should export getScriptKindFromFileName. Then this cast should be removed.\r\n                    return tsModule.getScriptKindFromFileName(fileName);\r\n                }\r\n            },\r\n            getDirectories: vueSys.getDirectories,\r\n            directoryExists: vueSys.directoryExists,\r\n            fileExists: vueSys.fileExists,\r\n            readFile: vueSys.readFile,\r\n            readDirectory(path, extensions, exclude, include, depth) {\r\n                const allExtensions = extensions ? extensions.concat(['.vue']) : extensions;\r\n                return vueSys.readDirectory(path, allExtensions, exclude, include, depth);\r\n            },\r\n            resolveModuleNames(moduleNames, containingFile) {\r\n                // in the normal case, delegate to ts.resolveModuleName\r\n                // in the relative-imported.vue case, manually build a resolved filename\r\n                const result = moduleNames.map(name => {\r\n                    if (name === bridge.moduleName) {\r\n                        return {\r\n                            resolvedFileName: bridge.fileName,\r\n                            extension: tsModule.Extension.Ts,\r\n                            /* tslint:disable:max-line-length */\r\n                            // https://github.com/microsoft/TypeScript/blob/bcbe1d763823eacd4b252c904e77761a6b8636a1/src/compiler/types.ts#L6216\r\n                            isExternalLibraryImport: true\r\n                        };\r\n                    }\r\n                    const cachedResolvedModule = moduleResolutionCache.getCache(name, containingFile);\r\n                    if (cachedResolvedModule) {\r\n                        return cachedResolvedModule;\r\n                    }\r\n                    if (!isVueFile(name)) {\r\n                        const tsResolvedModule = tsModule.resolveModuleName(name, containingFile, options, tsModule.sys).resolvedModule;\r\n                        if (tsResolvedModule) {\r\n                            moduleResolutionCache.setCache(name, containingFile, tsResolvedModule);\r\n                        }\r\n                        return tsResolvedModule;\r\n                    }\r\n                    const tsResolvedModule = tsModule.resolveModuleName(name, containingFile, options, vueSys).resolvedModule;\r\n                    if (!tsResolvedModule) {\r\n                        return undefined;\r\n                    }\r\n                    if (tsResolvedModule.resolvedFileName.endsWith('.vue.ts')) {\r\n                        const resolvedFileName = tsResolvedModule.resolvedFileName.slice(0, -'.ts'.length);\r\n                        const uri = URI.file(resolvedFileName);\r\n                        const resolvedFileFsPath = normalizeFileNameToFsPath(resolvedFileName);\r\n                        let doc = localScriptRegionDocuments.get(resolvedFileFsPath);\r\n                        // Vue file not created yet\r\n                        if (!doc) {\r\n                            doc = updatedScriptRegionDocuments.refreshAndGet(TextDocument.create(uri.toString(), 'vue', 0, tsModule.sys.readFile(resolvedFileName) || ''));\r\n                            localScriptRegionDocuments.set(resolvedFileFsPath, doc);\r\n                            scriptFileNameSet.add(resolvedFileName);\r\n                        }\r\n                        const extension = doc.languageId === 'typescript'\r\n                            ? tsModule.Extension.Ts\r\n                            : doc.languageId === 'tsx'\r\n                                ? tsModule.Extension.Tsx\r\n                                : tsModule.Extension.Js;\r\n                        const tsResolvedVueModule = { resolvedFileName, extension };\r\n                        moduleResolutionCache.setCache(name, containingFile, tsResolvedVueModule);\r\n                        return tsResolvedVueModule;\r\n                    }\r\n                    else {\r\n                        moduleResolutionCache.setCache(name, containingFile, tsResolvedModule);\r\n                        return tsResolvedModule;\r\n                    }\r\n                });\r\n                return result;\r\n            },\r\n            getScriptSnapshot: (fileName) => {\r\n                if (fileName.includes('node_modules')) {\r\n                    if (nodeModuleSnapshots.has(fileName)) {\r\n                        return nodeModuleSnapshots.get(fileName);\r\n                    }\r\n                    const fileText = tsModule.sys.readFile(fileName) || '';\r\n                    const snapshot = {\r\n                        getText: (start, end) => fileText.substring(start, end),\r\n                        getLength: () => fileText.length,\r\n                        getChangeRange: () => void 0\r\n                    };\r\n                    nodeModuleSnapshots.set(fileName, snapshot);\r\n                    return snapshot;\r\n                }\r\n                if (fileName === bridge.fileName) {\r\n                    const text = vueVersion === VueVersion.VPre25\r\n                        ? bridge.preVue25Content\r\n                        : vueVersion === VueVersion.V25\r\n                            ? bridge.vue25Content\r\n                            : bridge.vue30Content;\r\n                    return {\r\n                        getText: (start, end) => text.substring(start, end),\r\n                        getLength: () => text.length,\r\n                        getChangeRange: () => void 0\r\n                    };\r\n                }\r\n                const fileFsPath = normalizeFileNameToFsPath(fileName);\r\n                // .vue.template files are handled in pre-process phase\r\n                if (isVirtualVueTemplateFile(fileFsPath)) {\r\n                    const doc = localScriptRegionDocuments.get(fileFsPath);\r\n                    const fileText = doc ? doc.getText() : '';\r\n                    return {\r\n                        getText: (start, end) => fileText.substring(start, end),\r\n                        getLength: () => fileText.length,\r\n                        getChangeRange: () => void 0\r\n                    };\r\n                }\r\n                // js/ts files in workspace\r\n                if (!isVueFile(fileFsPath)) {\r\n                    if (projectFileSnapshots.has(fileFsPath)) {\r\n                        return projectFileSnapshots.get(fileFsPath);\r\n                    }\r\n                    const fileText = tsModule.sys.readFile(fileFsPath) || '';\r\n                    const snapshot = {\r\n                        getText: (start, end) => fileText.substring(start, end),\r\n                        getLength: () => fileText.length,\r\n                        getChangeRange: () => void 0\r\n                    };\r\n                    projectFileSnapshots.set(fileFsPath, snapshot);\r\n                    return snapshot;\r\n                }\r\n                // vue files in workspace\r\n                const doc = localScriptRegionDocuments.get(fileFsPath);\r\n                let fileText = '';\r\n                if (doc) {\r\n                    fileText = doc.getText();\r\n                }\r\n                else {\r\n                    // Note: This is required in addition to the parsing in embeddedSupport because\r\n                    // this works for .vue files that aren't even loaded by VS Code yet.\r\n                    const rawVueFileText = tsModule.sys.readFile(fileFsPath) || '';\r\n                    fileText = parseVueScript(rawVueFileText);\r\n                }\r\n                return {\r\n                    getText: (start, end) => fileText.substring(start, end),\r\n                    getLength: () => fileText.length,\r\n                    getChangeRange: () => void 0\r\n                };\r\n            },\r\n            getCurrentDirectory: () => env.getProjectRoot(),\r\n            getDefaultLibFileName: tsModule.getDefaultLibFilePath,\r\n            getNewLine: () => NEWLINE,\r\n            useCaseSensitiveFileNames: () => true\r\n        };\r\n    }\r\n    return {\r\n        queryVirtualFileInfo,\r\n        updateCurrentVirtualVueTextDocument,\r\n        updateCurrentVueTextDocument,\r\n        updateExternalDocument,\r\n        getFileNames,\r\n        getComplierOptions: () => compilerOptions,\r\n        getLanguageService: () => jsLanguageService,\r\n        dispose: () => {\r\n            jsLanguageService.dispose();\r\n        }\r\n    };\r\n}\r\nfunction patchTemplateService(original) {\r\n    const allowedGlobals = new Set(globalScope);\r\n    return Object.assign(Object.assign({}, original), { getCompletionsAtPosition(fileName, position, options) {\r\n            const result = original.getCompletionsAtPosition(fileName, position, options);\r\n            if (!result) {\r\n                return;\r\n            }\r\n            if (result.isMemberCompletion) {\r\n                return result;\r\n            }\r\n            return Object.assign(Object.assign({}, result), { entries: result.entries.filter(entry => {\r\n                    return allowedGlobals.has(entry.name);\r\n                }) });\r\n        } });\r\n}\r\nfunction defaultIgnorePatterns(tsModule, projectPath) {\r\n    const nodeModules = ['node_modules', '**/node_modules/*'];\r\n    const gitignore = tsModule.findConfigFile(projectPath, tsModule.sys.fileExists, '.gitignore');\r\n    if (!gitignore) {\r\n        return nodeModules;\r\n    }\r\n    try {\r\n        const parsedGlobs = parseGitIgnore.globs(gitignore);\r\n        const ignoreGlobs = flatten(parsedGlobs\r\n            .filter((r) => r.type === 'ignore')\r\n            .map((r) => r.patterns));\r\n        const filtered = ignoreGlobs.filter(s => !s.startsWith('!'));\r\n        return nodeModules.concat(filtered);\r\n    }\r\n    catch (_) {\r\n        return nodeModules;\r\n    }\r\n}\r\nfunction getScriptKind(tsModule, langId) {\r\n    return langId === 'typescript'\r\n        ? tsModule.ScriptKind.TS\r\n        : langId === 'tsx'\r\n            ? tsModule.ScriptKind.TSX\r\n            : tsModule.ScriptKind.JS;\r\n}\r\nfunction getParsedConfig(tsModule, projectRoot, tsconfigPath) {\r\n    const currentProjectPath = tsconfigPath ? dirname(tsconfigPath) : projectRoot;\r\n    const configJson = (tsconfigPath && tsModule.readConfigFile(tsconfigPath, tsModule.sys.readFile).config) || {\r\n        include: ['**/*.vue'],\r\n        exclude: defaultIgnorePatterns(tsModule, currentProjectPath)\r\n    };\r\n    // existingOptions should be empty since it always takes priority\r\n    return tsModule.parseJsonConfigFileContent(configJson, tsModule.sys, currentProjectPath, \r\n    /*existingOptions*/ {}, tsconfigPath, \r\n    /*resolutionStack*/ undefined, [\r\n        {\r\n            extension: 'vue',\r\n            isMixedContent: true,\r\n            // Note: in order for parsed config to include *.vue files, scriptKind must be set to Deferred.\r\n            // tslint:disable-next-line max-line-length\r\n            // See: https://github.com/microsoft/TypeScript/blob/2106b07f22d6d8f2affe34b9869767fa5bc7a4d9/src/compiler/utilities.ts#L6356\r\n            scriptKind: tsModule.ScriptKind.Deferred\r\n        }\r\n    ]);\r\n}\r\n//# sourceMappingURL=serviceHost.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/typescript/lib/typescript.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-uri/lib/umd/index.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/parse-gitignore/index.js","/Users/yoyo930021/git/vetur/server/src/embeddedSupport/languageModelCache.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/preprocess.ts","/Users/yoyo930021/git/vetur/server/src/utils/paths.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/bridge.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/vueSys.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/sourceMap.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/util.ts","/Users/yoyo930021/git/vetur/server/src/log.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/moduleResolutionCache.ts","/Users/yoyo930021/git/vetur/server/src/services/typescriptService/transformTemplate.ts","/Users/yoyo930021/git/vetur/server/src/services/vueInfoService.ts","/Users/yoyo930021/git/vetur/server/src/services/dependencyService.ts","/Users/yoyo930021/git/vetur/server/src/services/EnvironmentService.ts","/Users/yoyo930021/git/vetur/server/src/utils/vueVersion.ts","/Users/yoyo930021/git/vetur/server/node_modules/@types/lodash/index.d.ts"],"map":"{\"version\":3,\"file\":\"serviceHost.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/typescriptService/serviceHost.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/typescriptService/serviceHost.d.ts","writeByteOrderMark":false,"text":"import type ts from 'typescript';\r\nimport { TextDocument } from 'vscode-languageserver-textdocument';\r\nimport { LanguageModelCache } from '../../embeddedSupport/languageModelCache';\r\nimport { TemplateSourceMap } from './sourceMap';\r\nimport { ChildComponent } from '../vueInfoService';\r\nimport { RuntimeLibrary } from '../dependencyService';\r\nimport { EnvironmentService } from '../EnvironmentService';\r\nexport declare const templateSourceMap: TemplateSourceMap;\r\nexport interface IServiceHost {\r\n    queryVirtualFileInfo(fileName: string, currFileText: string): {\r\n        source: string;\r\n        sourceMapNodesString: string;\r\n    };\r\n    updateCurrentVirtualVueTextDocument(doc: TextDocument, childComponents?: ChildComponent[]): {\r\n        templateService: ts.LanguageService;\r\n        templateSourceMap: TemplateSourceMap;\r\n    };\r\n    updateCurrentVueTextDocument(doc: TextDocument): {\r\n        service: ts.LanguageService;\r\n        scriptDoc: TextDocument;\r\n    };\r\n    getLanguageService(): ts.LanguageService;\r\n    updateExternalDocument(filePath: string): void;\r\n    getFileNames(): string[];\r\n    getComplierOptions(): ts.CompilerOptions;\r\n    dispose(): void;\r\n}\r\n/**\r\n * Manges 4 set of files\r\n *\r\n * - `vue` files in workspace\r\n * - `js/ts` files in workspace\r\n * - `vue` files in `node_modules`\r\n * - `js/ts` files in `node_modules`\r\n */\r\nexport declare function getServiceHost(tsModule: RuntimeLibrary['typescript'], env: EnvironmentService, updatedScriptRegionDocuments: LanguageModelCache<TextDocument>): IServiceHost;\r\n"}}
