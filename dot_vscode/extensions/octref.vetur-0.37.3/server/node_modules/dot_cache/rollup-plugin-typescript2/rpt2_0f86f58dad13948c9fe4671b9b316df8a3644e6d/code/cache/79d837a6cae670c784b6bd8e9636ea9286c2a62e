{"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { FoldingRangeKind } from 'vscode-languageserver-types';\r\nimport { HtmlTokenType, createScanner } from '../parser/htmlScanner';\r\nimport { isVoidElement } from '../tagProviders/htmlTags';\r\nexport function getFoldingRanges(document) {\r\n    const scanner = createScanner(document.getText());\r\n    let token = scanner.scan();\r\n    const ranges = [];\r\n    const stack = [];\r\n    let lastTagName = null;\r\n    let prevStart = -1;\r\n    function addRange(range) {\r\n        ranges.push(range);\r\n        prevStart = range.startLine;\r\n    }\r\n    while (token !== HtmlTokenType.EOS) {\r\n        switch (token) {\r\n            case HtmlTokenType.StartTag: {\r\n                const tagName = scanner.getTokenText();\r\n                const startLine = document.positionAt(scanner.getTokenOffset()).line;\r\n                stack.push({ startLine, tagName });\r\n                lastTagName = tagName;\r\n                break;\r\n            }\r\n            case HtmlTokenType.EndTag: {\r\n                lastTagName = scanner.getTokenText();\r\n                break;\r\n            }\r\n            case HtmlTokenType.StartTagClose:\r\n                if (!lastTagName || !isVoidElement(lastTagName)) {\r\n                    break;\r\n                }\r\n            // fallthrough\r\n            case HtmlTokenType.EndTagClose:\r\n            case HtmlTokenType.StartTagSelfClose: {\r\n                let i = stack.length - 1;\r\n                while (i >= 0 && stack[i].tagName !== lastTagName) {\r\n                    i--;\r\n                }\r\n                if (i >= 0) {\r\n                    const stackElement = stack[i];\r\n                    stack.length = i;\r\n                    const line = document.positionAt(scanner.getTokenOffset()).line;\r\n                    const startLine = stackElement.startLine;\r\n                    const endLine = line - 1;\r\n                    if (endLine > startLine && prevStart !== startLine) {\r\n                        addRange({ startLine, endLine });\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case HtmlTokenType.Comment: {\r\n                let startLine = document.positionAt(scanner.getTokenOffset()).line;\r\n                const text = scanner.getTokenText();\r\n                const m = text.match(/^\\s*#(region\\b)|(endregion\\b)/);\r\n                if (m) {\r\n                    if (m[1]) {\r\n                        // start pattern match\r\n                        stack.push({ startLine, tagName: '' }); // empty tagName marks region\r\n                    }\r\n                    else {\r\n                        let i = stack.length - 1;\r\n                        while (i >= 0 && stack[i].tagName.length) {\r\n                            i--;\r\n                        }\r\n                        if (i >= 0) {\r\n                            const stackElement = stack[i];\r\n                            stack.length = i;\r\n                            const endLine = startLine;\r\n                            startLine = stackElement.startLine;\r\n                            if (endLine > startLine && prevStart !== startLine) {\r\n                                addRange({ startLine, endLine, kind: FoldingRangeKind.Region });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const endLine = document.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;\r\n                    if (startLine < endLine) {\r\n                        addRange({ startLine, endLine, kind: FoldingRangeKind.Comment });\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        token = scanner.scan();\r\n    }\r\n    return ranges;\r\n}\r\n//# sourceMappingURL=htmlFolding.js.map","references":["/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-types/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/node_modules/vscode-languageserver-textdocument/lib/umd/main.d.ts","/Users/yoyo930021/git/vetur/server/src/modes/template/parser/htmlScanner.ts","/Users/yoyo930021/git/vetur/server/src/modes/template/tagProviders/htmlTags.ts"],"map":"{\"version\":3,\"file\":\"htmlFolding.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modes/template/services/htmlFolding.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yoyo930021/git/vetur/server/node_modules/.cache/rollup-plugin-typescript2/placeholder/modes/template/services/htmlFolding.d.ts","writeByteOrderMark":false,"text":"import { FoldingRange } from 'vscode-languageserver-types';\r\nimport type { TextDocument } from 'vscode-languageserver-textdocument';\r\nexport declare function getFoldingRanges(document: TextDocument): FoldingRange[];\r\n"}}
