import{c as getConfig,s as setAccTitle,g as getAccTitle,a as getAccDescription,b as setAccDescription,r as setDiagramTitle,t as getDiagramTitle,m as mermaidAPI,l as log,e as common,v as clear$2,y as random,z as getConfig$1,u as utils,A as setupGraphViewbox}from"./mermaid-a98f434b.js";import{select}from"d3";import"ts-dedent";import"dayjs";import"@braintree/sanitize-url";import"dompurify";import"khroma";import"lodash-es/memoize.js";import"stylis";import"lodash-es/isEmpty.js";var parser=function(){var t=function(t,e,r,i){for(r=r||{},i=t.length;i--;r[t[i]]=e);return r},e=[1,4],r=[1,7],i=[1,5],a=[1,9],c=[1,6],n=[2,6],s=[1,16],o=[6,8,14,20,22,24,25,27,29,32,37,40,50,55],m=[8,14,20,22,24,25,27,29,32,37,40],l=[8,13,14,20,22,24,25,27,29,32,37,40],h=[1,26],g=[6,8,14,50,55],u=[8,14,55],y=[1,53],p=[1,52],d=[8,14,30,33,35,38,55],b=[1,67],f=[1,68],k=[1,69],$=[8,14,33,35,42,55],x={trace:function(){},yy:{},symbols_:{error:2,start:3,eol:4,directive:5,GG:6,document:7,EOF:8,":":9,DIR:10,options:11,body:12,OPT:13,NL:14,line:15,statement:16,commitStatement:17,mergeStatement:18,cherryPickStatement:19,acc_title:20,acc_title_value:21,acc_descr:22,acc_descr_value:23,acc_descr_multiline_value:24,section:25,branchStatement:26,CHECKOUT:27,ref:28,BRANCH:29,ORDER:30,NUM:31,CHERRY_PICK:32,COMMIT_ID:33,STR:34,COMMIT_TAG:35,EMPTYSTR:36,MERGE:37,COMMIT_TYPE:38,commitType:39,COMMIT:40,commit_arg:41,COMMIT_MSG:42,NORMAL:43,REVERSE:44,HIGHLIGHT:45,openDirective:46,typeDirective:47,closeDirective:48,argDirective:49,open_directive:50,type_directive:51,arg_directive:52,close_directive:53,ID:54,";":55,$accept:0,$end:1},terminals_:{2:"error",6:"GG",8:"EOF",9:":",10:"DIR",13:"OPT",14:"NL",20:"acc_title",21:"acc_title_value",22:"acc_descr",23:"acc_descr_value",24:"acc_descr_multiline_value",25:"section",27:"CHECKOUT",29:"BRANCH",30:"ORDER",31:"NUM",32:"CHERRY_PICK",33:"COMMIT_ID",34:"STR",35:"COMMIT_TAG",36:"EMPTYSTR",37:"MERGE",38:"COMMIT_TYPE",40:"COMMIT",42:"COMMIT_MSG",43:"NORMAL",44:"REVERSE",45:"HIGHLIGHT",50:"open_directive",51:"type_directive",52:"arg_directive",53:"close_directive",54:"ID",55:";"},productions_:[0,[3,2],[3,2],[3,3],[3,4],[3,5],[7,0],[7,2],[11,2],[11,1],[12,0],[12,2],[15,2],[15,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[16,1],[16,1],[16,2],[26,2],[26,4],[19,3],[19,5],[19,5],[19,5],[19,5],[18,2],[18,4],[18,4],[18,4],[18,6],[18,6],[18,6],[18,6],[18,6],[18,6],[18,8],[18,8],[18,8],[18,8],[18,8],[18,8],[17,2],[17,3],[17,3],[17,5],[17,5],[17,3],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,3],[17,5],[17,5],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[41,0],[41,1],[39,1],[39,1],[39,1],[5,3],[5,5],[46,1],[47,1],[49,1],[48,1],[28,1],[28,1],[4,1],[4,1],[4,1]],performAction:function(t,e,r,i,a,c,n){var s=c.length-1;switch(a){case 3:return c[s];case 4:return c[s-1];case 5:return i.setDirection(c[s-3]),c[s-1];case 7:i.setOptions(c[s-1]),this.$=c[s];break;case 8:c[s-1]+=c[s],this.$=c[s-1];break;case 10:this.$=[];break;case 11:c[s-1].push(c[s]),this.$=c[s-1];break;case 12:this.$=c[s-1];break;case 17:this.$=c[s].trim(),i.setAccTitle(this.$);break;case 18:case 19:this.$=c[s].trim(),i.setAccDescription(this.$);break;case 20:i.addSection(c[s].substr(8)),this.$=c[s].substr(8);break;case 22:i.checkout(c[s]);break;case 23:i.branch(c[s]);break;case 24:i.branch(c[s-2],c[s]);break;case 25:i.cherryPick(c[s],"",void 0);break;case 26:i.cherryPick(c[s-2],"",c[s]);break;case 27:case 29:i.cherryPick(c[s-2],"","");break;case 28:i.cherryPick(c[s],"",c[s-2]);break;case 30:i.merge(c[s],"","","");break;case 31:i.merge(c[s-2],c[s],"","");break;case 32:i.merge(c[s-2],"",c[s],"");break;case 33:i.merge(c[s-2],"","",c[s]);break;case 34:i.merge(c[s-4],c[s],"",c[s-2]);break;case 35:i.merge(c[s-4],"",c[s],c[s-2]);break;case 36:i.merge(c[s-4],"",c[s-2],c[s]);break;case 37:i.merge(c[s-4],c[s-2],c[s],"");break;case 38:i.merge(c[s-4],c[s-2],"",c[s]);break;case 39:i.merge(c[s-4],c[s],c[s-2],"");break;case 40:i.merge(c[s-6],c[s-4],c[s-2],c[s]);break;case 41:i.merge(c[s-6],c[s],c[s-4],c[s-2]);break;case 42:i.merge(c[s-6],c[s-4],c[s],c[s-2]);break;case 43:i.merge(c[s-6],c[s-2],c[s-4],c[s]);break;case 44:i.merge(c[s-6],c[s],c[s-2],c[s-4]);break;case 45:i.merge(c[s-6],c[s-2],c[s],c[s-4]);break;case 46:i.commit(c[s]);break;case 47:i.commit("","",i.commitType.NORMAL,c[s]);break;case 48:i.commit("","",c[s],"");break;case 49:i.commit("","",c[s],c[s-2]);break;case 50:i.commit("","",c[s-2],c[s]);break;case 51:i.commit("",c[s],i.commitType.NORMAL,"");break;case 52:i.commit("",c[s-2],i.commitType.NORMAL,c[s]);break;case 53:i.commit("",c[s],i.commitType.NORMAL,c[s-2]);break;case 54:i.commit("",c[s-2],c[s],"");break;case 55:i.commit("",c[s],c[s-2],"");break;case 56:i.commit("",c[s-4],c[s-2],c[s]);break;case 57:i.commit("",c[s-4],c[s],c[s-2]);break;case 58:i.commit("",c[s-2],c[s-4],c[s]);break;case 59:i.commit("",c[s],c[s-4],c[s-2]);break;case 60:i.commit("",c[s],c[s-2],c[s-4]);break;case 61:i.commit("",c[s-2],c[s],c[s-4]);break;case 62:i.commit(c[s],"",i.commitType.NORMAL,"");break;case 63:i.commit(c[s],"",i.commitType.NORMAL,c[s-2]);break;case 64:i.commit(c[s-2],"",i.commitType.NORMAL,c[s]);break;case 65:i.commit(c[s-2],"",c[s],"");break;case 66:i.commit(c[s],"",c[s-2],"");break;case 67:i.commit(c[s],c[s-2],i.commitType.NORMAL,"");break;case 68:i.commit(c[s-2],c[s],i.commitType.NORMAL,"");break;case 69:i.commit(c[s-4],"",c[s-2],c[s]);break;case 70:i.commit(c[s-4],"",c[s],c[s-2]);break;case 71:i.commit(c[s-2],"",c[s-4],c[s]);break;case 72:i.commit(c[s],"",c[s-4],c[s-2]);break;case 73:i.commit(c[s],"",c[s-2],c[s-4]);break;case 74:i.commit(c[s-2],"",c[s],c[s-4]);break;case 75:i.commit(c[s-4],c[s],c[s-2],"");break;case 76:i.commit(c[s-4],c[s-2],c[s],"");break;case 77:i.commit(c[s-2],c[s],c[s-4],"");break;case 78:i.commit(c[s],c[s-2],c[s-4],"");break;case 79:i.commit(c[s],c[s-4],c[s-2],"");break;case 80:i.commit(c[s-2],c[s-4],c[s],"");break;case 81:i.commit(c[s-4],c[s],i.commitType.NORMAL,c[s-2]);break;case 82:i.commit(c[s-4],c[s-2],i.commitType.NORMAL,c[s]);break;case 83:i.commit(c[s-2],c[s],i.commitType.NORMAL,c[s-4]);break;case 84:i.commit(c[s],c[s-2],i.commitType.NORMAL,c[s-4]);break;case 85:i.commit(c[s],c[s-4],i.commitType.NORMAL,c[s-2]);break;case 86:i.commit(c[s-2],c[s-4],i.commitType.NORMAL,c[s]);break;case 87:i.commit(c[s-6],c[s-4],c[s-2],c[s]);break;case 88:i.commit(c[s-6],c[s-4],c[s],c[s-2]);break;case 89:i.commit(c[s-6],c[s-2],c[s-4],c[s]);break;case 90:i.commit(c[s-6],c[s],c[s-4],c[s-2]);break;case 91:i.commit(c[s-6],c[s-2],c[s],c[s-4]);break;case 92:i.commit(c[s-6],c[s],c[s-2],c[s-4]);break;case 93:i.commit(c[s-4],c[s-6],c[s-2],c[s]);break;case 94:i.commit(c[s-4],c[s-6],c[s],c[s-2]);break;case 95:i.commit(c[s-2],c[s-6],c[s-4],c[s]);break;case 96:i.commit(c[s],c[s-6],c[s-4],c[s-2]);break;case 97:i.commit(c[s-2],c[s-6],c[s],c[s-4]);break;case 98:i.commit(c[s],c[s-6],c[s-2],c[s-4]);break;case 99:i.commit(c[s],c[s-4],c[s-2],c[s-6]);break;case 100:i.commit(c[s-2],c[s-4],c[s],c[s-6]);break;case 101:i.commit(c[s],c[s-2],c[s-4],c[s-6]);break;case 102:i.commit(c[s-2],c[s],c[s-4],c[s-6]);break;case 103:i.commit(c[s-4],c[s-2],c[s],c[s-6]);break;case 104:i.commit(c[s-4],c[s],c[s-2],c[s-6]);break;case 105:i.commit(c[s-2],c[s-4],c[s-6],c[s]);break;case 106:i.commit(c[s],c[s-4],c[s-6],c[s-2]);break;case 107:i.commit(c[s-2],c[s],c[s-6],c[s-4]);break;case 108:i.commit(c[s],c[s-2],c[s-6],c[s-4]);break;case 109:i.commit(c[s-4],c[s-2],c[s-6],c[s]);break;case 110:i.commit(c[s-4],c[s],c[s-6],c[s-2]);break;case 111:this.$="";break;case 112:this.$=c[s];break;case 113:this.$=i.commitType.NORMAL;break;case 114:this.$=i.commitType.REVERSE;break;case 115:this.$=i.commitType.HIGHLIGHT;break;case 118:i.parseDirective("%%{","open_directive");break;case 119:i.parseDirective(c[s],"type_directive");break;case 120:c[s]=c[s].trim().replace(/'/g,'"'),i.parseDirective(c[s],"arg_directive");break;case 121:i.parseDirective("}%%","close_directive","gitGraph")}},table:[{3:1,4:2,5:3,6:e,8:r,14:i,46:8,50:a,55:c},{1:[3]},{3:10,4:2,5:3,6:e,8:r,14:i,46:8,50:a,55:c},{3:11,4:2,5:3,6:e,8:r,14:i,46:8,50:a,55:c},{7:12,8:n,9:[1,13],10:[1,14],11:15,14:s},t(o,[2,124]),t(o,[2,125]),t(o,[2,126]),{47:17,51:[1,18]},{51:[2,118]},{1:[2,1]},{1:[2,2]},{8:[1,19]},{7:20,8:n,11:15,14:s},{9:[1,21]},t(m,[2,10],{12:22,13:[1,23]}),t(l,[2,9]),{9:[1,25],48:24,53:h},t([9,53],[2,119]),{1:[2,3]},{8:[1,27]},{7:28,8:n,11:15,14:s},{8:[2,7],14:[1,31],15:29,16:30,17:32,18:33,19:34,20:[1,35],22:[1,36],24:[1,37],25:[1,38],26:39,27:[1,40],29:[1,44],32:[1,43],37:[1,42],40:[1,41]},t(l,[2,8]),t(g,[2,116]),{49:45,52:[1,46]},t(g,[2,121]),{1:[2,4]},{8:[1,47]},t(m,[2,11]),{4:48,8:r,14:i,55:c},t(m,[2,13]),t(u,[2,14]),t(u,[2,15]),t(u,[2,16]),{21:[1,49]},{23:[1,50]},t(u,[2,19]),t(u,[2,20]),t(u,[2,21]),{28:51,34:y,54:p},t(u,[2,111],{41:54,33:[1,57],34:[1,59],35:[1,55],38:[1,56],42:[1,58]}),{28:60,34:y,54:p},{33:[1,61],35:[1,62]},{28:63,34:y,54:p},{48:64,53:h},{53:[2,120]},{1:[2,5]},t(m,[2,12]),t(u,[2,17]),t(u,[2,18]),t(u,[2,22]),t(d,[2,122]),t(d,[2,123]),t(u,[2,46]),{34:[1,65]},{39:66,43:b,44:f,45:k},{34:[1,70]},{34:[1,71]},t(u,[2,112]),t(u,[2,30],{33:[1,72],35:[1,74],38:[1,73]}),{34:[1,75]},{34:[1,76],36:[1,77]},t(u,[2,23],{30:[1,78]}),t(g,[2,117]),t(u,[2,47],{33:[1,80],38:[1,79],42:[1,81]}),t(u,[2,48],{33:[1,83],35:[1,82],42:[1,84]}),t($,[2,113]),t($,[2,114]),t($,[2,115]),t(u,[2,51],{35:[1,85],38:[1,86],42:[1,87]}),t(u,[2,62],{33:[1,90],35:[1,88],38:[1,89]}),{34:[1,91]},{39:92,43:b,44:f,45:k},{34:[1,93]},t(u,[2,25],{35:[1,94]}),{33:[1,95]},{33:[1,96]},{31:[1,97]},{39:98,43:b,44:f,45:k},{34:[1,99]},{34:[1,100]},{34:[1,101]},{34:[1,102]},{34:[1,103]},{34:[1,104]},{39:105,43:b,44:f,45:k},{34:[1,106]},{34:[1,107]},{39:108,43:b,44:f,45:k},{34:[1,109]},t(u,[2,31],{35:[1,111],38:[1,110]}),t(u,[2,32],{33:[1,113],35:[1,112]}),t(u,[2,33],{33:[1,114],38:[1,115]}),{34:[1,116],36:[1,117]},{34:[1,118]},{34:[1,119]},t(u,[2,24]),t(u,[2,49],{33:[1,120],42:[1,121]}),t(u,[2,53],{38:[1,122],42:[1,123]}),t(u,[2,63],{33:[1,125],38:[1,124]}),t(u,[2,50],{33:[1,126],42:[1,127]}),t(u,[2,55],{35:[1,128],42:[1,129]}),t(u,[2,66],{33:[1,131],35:[1,130]}),t(u,[2,52],{38:[1,132],42:[1,133]}),t(u,[2,54],{35:[1,134],42:[1,135]}),t(u,[2,67],{35:[1,137],38:[1,136]}),t(u,[2,64],{33:[1,139],38:[1,138]}),t(u,[2,65],{33:[1,141],35:[1,140]}),t(u,[2,68],{35:[1,143],38:[1,142]}),{39:144,43:b,44:f,45:k},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{39:149,43:b,44:f,45:k},t(u,[2,26]),t(u,[2,27]),t(u,[2,28]),t(u,[2,29]),{34:[1,150]},{34:[1,151]},{39:152,43:b,44:f,45:k},{34:[1,153]},{39:154,43:b,44:f,45:k},{34:[1,155]},{34:[1,156]},{34:[1,157]},{34:[1,158]},{34:[1,159]},{34:[1,160]},{34:[1,161]},{39:162,43:b,44:f,45:k},{34:[1,163]},{34:[1,164]},{34:[1,165]},{39:166,43:b,44:f,45:k},{34:[1,167]},{39:168,43:b,44:f,45:k},{34:[1,169]},{34:[1,170]},{34:[1,171]},{39:172,43:b,44:f,45:k},{34:[1,173]},t(u,[2,37],{35:[1,174]}),t(u,[2,38],{38:[1,175]}),t(u,[2,36],{33:[1,176]}),t(u,[2,39],{35:[1,177]}),t(u,[2,34],{38:[1,178]}),t(u,[2,35],{33:[1,179]}),t(u,[2,60],{42:[1,180]}),t(u,[2,73],{33:[1,181]}),t(u,[2,61],{42:[1,182]}),t(u,[2,84],{38:[1,183]}),t(u,[2,74],{33:[1,184]}),t(u,[2,83],{38:[1,185]}),t(u,[2,59],{42:[1,186]}),t(u,[2,72],{33:[1,187]}),t(u,[2,58],{42:[1,188]}),t(u,[2,78],{35:[1,189]}),t(u,[2,71],{33:[1,190]}),t(u,[2,77],{35:[1,191]}),t(u,[2,57],{42:[1,192]}),t(u,[2,85],{38:[1,193]}),t(u,[2,56],{42:[1,194]}),t(u,[2,79],{35:[1,195]}),t(u,[2,80],{35:[1,196]}),t(u,[2,86],{38:[1,197]}),t(u,[2,70],{33:[1,198]}),t(u,[2,81],{38:[1,199]}),t(u,[2,69],{33:[1,200]}),t(u,[2,75],{35:[1,201]}),t(u,[2,76],{35:[1,202]}),t(u,[2,82],{38:[1,203]}),{34:[1,204]},{39:205,43:b,44:f,45:k},{34:[1,206]},{34:[1,207]},{39:208,43:b,44:f,45:k},{34:[1,209]},{34:[1,210]},{34:[1,211]},{34:[1,212]},{39:213,43:b,44:f,45:k},{34:[1,214]},{39:215,43:b,44:f,45:k},{34:[1,216]},{34:[1,217]},{34:[1,218]},{34:[1,219]},{34:[1,220]},{34:[1,221]},{34:[1,222]},{39:223,43:b,44:f,45:k},{34:[1,224]},{34:[1,225]},{34:[1,226]},{39:227,43:b,44:f,45:k},{34:[1,228]},{39:229,43:b,44:f,45:k},{34:[1,230]},{34:[1,231]},{34:[1,232]},{39:233,43:b,44:f,45:k},t(u,[2,40]),t(u,[2,42]),t(u,[2,41]),t(u,[2,43]),t(u,[2,45]),t(u,[2,44]),t(u,[2,101]),t(u,[2,102]),t(u,[2,99]),t(u,[2,100]),t(u,[2,104]),t(u,[2,103]),t(u,[2,108]),t(u,[2,107]),t(u,[2,106]),t(u,[2,105]),t(u,[2,110]),t(u,[2,109]),t(u,[2,98]),t(u,[2,97]),t(u,[2,96]),t(u,[2,95]),t(u,[2,93]),t(u,[2,94]),t(u,[2,92]),t(u,[2,91]),t(u,[2,90]),t(u,[2,89]),t(u,[2,87]),t(u,[2,88])],defaultActions:{9:[2,118],10:[2,1],11:[2,2],19:[2,3],27:[2,4],46:[2,120],47:[2,5]},parseError:function(t,e){if(!e.recoverable){var r=new Error(t);throw r.hash=e,r}this.trace(t)},parse:function(t){var e=[0],r=[],i=[null],a=[],c=this.table,n="",s=0,o=0,m=a.slice.call(arguments,1),l=Object.create(this.lexer),h={yy:{}};for(var g in this.yy)Object.prototype.hasOwnProperty.call(this.yy,g)&&(h.yy[g]=this.yy[g]);l.setInput(t,h.yy),h.yy.lexer=l,h.yy.parser=this,void 0===l.yylloc&&(l.yylloc={});var u=l.yylloc;a.push(u);var y=l.options&&l.options.ranges;"function"==typeof h.yy.parseError?this.parseError=h.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var p,d,b,f,k,$,x,_,T,w={};;){if(d=e[e.length-1],this.defaultActions[d]?b=this.defaultActions[d]:(null==p&&(T=void 0,"number"!=typeof(T=r.pop()||l.lex()||1)&&(T instanceof Array&&(T=(r=T).pop()),T=this.symbols_[T]||T),p=T),b=c[d]&&c[d][p]),void 0===b||!b.length||!b[0]){var C;for(k in _=[],c[d])this.terminals_[k]&&k>2&&_.push("'"+this.terminals_[k]+"'");C=l.showPosition?"Parse error on line "+(s+1)+":\n"+l.showPosition()+"\nExpecting "+_.join(", ")+", got '"+(this.terminals_[p]||p)+"'":"Parse error on line "+(s+1)+": Unexpected "+(1==p?"end of input":"'"+(this.terminals_[p]||p)+"'"),this.parseError(C,{text:l.match,token:this.terminals_[p]||p,line:l.yylineno,loc:u,expected:_})}if(b[0]instanceof Array&&b.length>1)throw new Error("Parse Error: multiple actions possible at state: "+d+", token: "+p);switch(b[0]){case 1:e.push(p),i.push(l.yytext),a.push(l.yylloc),e.push(b[1]),p=null,o=l.yyleng,n=l.yytext,s=l.yylineno,u=l.yylloc;break;case 2:if($=this.productions_[b[1]][1],w.$=i[i.length-$],w._$={first_line:a[a.length-($||1)].first_line,last_line:a[a.length-1].last_line,first_column:a[a.length-($||1)].first_column,last_column:a[a.length-1].last_column},y&&(w._$.range=[a[a.length-($||1)].range[0],a[a.length-1].range[1]]),void 0!==(f=this.performAction.apply(w,[n,o,s,h.yy,b[1],i,a].concat(m))))return f;$&&(e=e.slice(0,-1*$*2),i=i.slice(0,-1*$),a=a.slice(0,-1*$)),e.push(this.productions_[b[1]][0]),i.push(w.$),a.push(w._$),x=c[e[e.length-2]][e[e.length-1]],e.push(x);break;case 3:return!0}}return!0}},_={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t,e){return this.yy=e||this.yy||{},this._input=t,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];return this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t,t.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,r=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e),this.offset-=e;var i=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),r.length-1&&(this.yylineno-=r.length-1);var a=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===i.length?this.yylloc.first_column:0)+i[i.length-r.length].length-r[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[a[0],a[0]+this.yyleng-e]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},test_match:function(t,e){var r,i,a;if(this.options.backtrack_lexer&&(a={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(a.yylloc.range=this.yylloc.range.slice(0))),(i=t[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],r=this.performAction.call(this,this.yy,this,e,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),r)return r;if(this._backtrack){for(var c in a)this[c]=a[c];return!1}return!1},next:function(){if(this.done)return this.EOF;var t,e,r,i;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var a=this._currentRules(),c=0;c<a.length;c++)if((r=this._input.match(this.rules[a[c]]))&&(!e||r[0].length>e[0].length)){if(e=r,i=c,this.options.backtrack_lexer){if(!1!==(t=this.test_match(r,a[c])))return t;if(this._backtrack){e=!1;continue}return!1}if(!this.options.flex)break}return e?!1!==(t=this.test_match(e,a[i]))&&t:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){return this.next()||this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(t){return(t=this.conditionStack.length-1-Math.abs(t||0))>=0?this.conditionStack[t]:"INITIAL"},pushState:function(t){this.begin(t)},stateStackSize:function(){return this.conditionStack.length},options:{"case-insensitive":!0},performAction:function(t,e,r,i){switch(r){case 0:return this.begin("open_directive"),50;case 1:return this.begin("type_directive"),51;case 2:return this.popState(),this.begin("arg_directive"),9;case 3:return this.popState(),this.popState(),53;case 4:return 52;case 5:return this.begin("acc_title"),20;case 6:return this.popState(),"acc_title_value";case 7:return this.begin("acc_descr"),22;case 8:return this.popState(),"acc_descr_value";case 9:this.begin("acc_descr_multiline");break;case 10:case 34:case 38:this.popState();break;case 11:return"acc_descr_multiline_value";case 12:return 14;case 13:case 14:break;case 15:return 6;case 16:return 40;case 17:return 33;case 18:return 38;case 19:return 42;case 20:return 43;case 21:return 44;case 22:return 45;case 23:return 35;case 24:return 29;case 25:return 30;case 26:return 37;case 27:return 32;case 28:return 27;case 29:case 30:return 10;case 31:return 9;case 32:return"CARET";case 33:this.begin("options");break;case 35:return 13;case 36:return 36;case 37:this.begin("string");break;case 39:return 34;case 40:return 31;case 41:return 54;case 42:return 8}},rules:[/^(?:%%\{)/i,/^(?:((?:(?!\}%%)[^:.])*))/i,/^(?::)/i,/^(?:\}%%)/i,/^(?:((?:(?!\}%%).|\n)*))/i,/^(?:accTitle\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*\{\s*)/i,/^(?:[\}])/i,/^(?:[^\}]*)/i,/^(?:(\r?\n)+)/i,/^(?:#[^\n]*)/i,/^(?:%[^\n]*)/i,/^(?:gitGraph\b)/i,/^(?:commit(?=\s|$))/i,/^(?:id:)/i,/^(?:type:)/i,/^(?:msg:)/i,/^(?:NORMAL\b)/i,/^(?:REVERSE\b)/i,/^(?:HIGHLIGHT\b)/i,/^(?:tag:)/i,/^(?:branch(?=\s|$))/i,/^(?:order:)/i,/^(?:merge(?=\s|$))/i,/^(?:cherry-pick(?=\s|$))/i,/^(?:checkout(?=\s|$))/i,/^(?:LR\b)/i,/^(?:TB\b)/i,/^(?::)/i,/^(?:\^)/i,/^(?:options\r?\n)/i,/^(?:[ \r\n\t]+end\b)/i,/^(?:[\s\S]+(?=[ \r\n\t]+end))/i,/^(?:["]["])/i,/^(?:["])/i,/^(?:["])/i,/^(?:[^"]*)/i,/^(?:[0-9]+(?=\s|$))/i,/^(?:\w([-\./\w]*[-\w])?)/i,/^(?:$)/i,/^(?:\s+)/i],conditions:{acc_descr_multiline:{rules:[10,11],inclusive:!1},acc_descr:{rules:[8],inclusive:!1},acc_title:{rules:[6],inclusive:!1},close_directive:{rules:[],inclusive:!1},arg_directive:{rules:[3,4],inclusive:!1},type_directive:{rules:[2,3],inclusive:!1},open_directive:{rules:[1],inclusive:!1},options:{rules:[34,35],inclusive:!1},string:{rules:[38,39],inclusive:!1},INITIAL:{rules:[0,5,7,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,40,41,42,43],inclusive:!0}}};function T(){this.yy={}}return x.lexer=_,T.prototype=x,x.Parser=T,new T}();parser.parser=parser;const gitGraphParser=parser;let mainBranchName=getConfig().gitGraph.mainBranchName,mainBranchOrder=getConfig().gitGraph.mainBranchOrder,commits={},head=null,branchesConfig={};branchesConfig[mainBranchName]={name:mainBranchName,order:mainBranchOrder};let branches={};branches[mainBranchName]=head;let curBranch=mainBranchName,direction="LR",seq=0;function getId(){return random({length:7})}const parseDirective=function(t,e,r){mermaidAPI.parseDirective(this,t,e,r)};function uniqBy(t,e){const r=Object.create(null);return t.reduce(((t,i)=>{const a=e(i);return r[a]||(r[a]=!0,t.push(i)),t}),[])}const setDirection=function(t){direction=t};let options={};const setOptions=function(t){log.debug("options str",t),t=(t=t&&t.trim())||"{}";try{options=JSON.parse(t)}catch(t){log.error("error while parsing gitGraph options",t.message)}},getOptions=function(){return options},commit=function(t,e,r,i){log.debug("Entering commit:",t,e,r,i),e=common.sanitizeText(e,getConfig()),t=common.sanitizeText(t,getConfig()),i=common.sanitizeText(i,getConfig());const a={id:e||seq+"-"+getId(),message:t,seq:seq++,type:r||commitType$1.NORMAL,tag:i||"",parents:null==head?[]:[head.id],branch:curBranch};head=a,commits[a.id]=a,branches[curBranch]=a.id,log.debug("in pushCommit "+a.id)},branch=function(t,e){if(t=common.sanitizeText(t,getConfig()),void 0!==branches[t]){let e=new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '+t+'")');throw e.hash={text:"branch "+t,token:"branch "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"checkout '+t+'"']},e}branches[t]=null!=head?head.id:null,branchesConfig[t]={name:t,order:e?parseInt(e,10):null},checkout(t),log.debug("in createBranch")},merge=function(t,e,r,i){t=common.sanitizeText(t,getConfig()),e=common.sanitizeText(e,getConfig());const a=commits[branches[curBranch]],c=commits[branches[t]];if(curBranch===t){let e=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},e}if(void 0===a||!a){let e=new Error('Incorrect usage of "merge". Current branch ('+curBranch+")has no commits");throw e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["commit"]},e}if(void 0===branches[t]){let e=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch "+t]},e}if(void 0===c||!c){let e=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"commit"']},e}if(a===c){let e=new Error('Incorrect usage of "merge". Both branches have same head');throw e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},e}if(e&&void 0!==commits[e]){let a=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw a.hash={text:"merge "+t+e+r+i,token:"merge "+t+e+r+i,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["merge "+t+" "+e+"_UNIQUE "+r+" "+i]},a}const n={id:e||seq+"-"+getId(),message:"merged branch "+t+" into "+curBranch,seq:seq++,parents:[null==head?null:head.id,branches[t]],branch:curBranch,type:commitType$1.MERGE,customType:r,customId:!!e,tag:i||""};head=n,commits[n.id]=n,branches[curBranch]=n.id,log.debug(branches),log.debug("in mergeBranch")},cherryPick=function(t,e,r){if(log.debug("Entering cherryPick:",t,e,r),t=common.sanitizeText(t,getConfig()),e=common.sanitizeText(e,getConfig()),r=common.sanitizeText(r,getConfig()),!t||void 0===commits[t]){let r=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}let i=commits[t],a=i.branch;if(i.type===commitType$1.MERGE){let r=new Error('Incorrect usage of "cherryPick". Source commit should not be a merge commit');throw r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}if(!e||void 0===commits[e]){if(a===curBranch){let r=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}const c=commits[branches[curBranch]];if(void 0===c||!c){let r=new Error('Incorrect usage of "cherry-pick". Current branch ('+curBranch+")has no commits");throw r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}const n={id:seq+"-"+getId(),message:"cherry-picked "+i+" into "+curBranch,seq:seq++,parents:[null==head?null:head.id,i.id],branch:curBranch,type:commitType$1.CHERRY_PICK,tag:r??"cherry-pick:"+i.id};head=n,commits[n.id]=n,branches[curBranch]=n.id,log.debug(branches),log.debug("in cherryPick")}},checkout=function(t){if(t=common.sanitizeText(t,getConfig()),void 0===branches[t]){let e=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '+t+'")');throw e.hash={text:"checkout "+t,token:"checkout "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"branch '+t+'"']},e}{curBranch=t;const e=branches[curBranch];head=commits[e]}};function upsert(t,e,r){const i=t.indexOf(e);-1===i?t.push(r):t.splice(i,1,r)}function prettyPrintCommitHistory(t){const e=t.reduce(((t,e)=>t.seq>e.seq?t:e),t[0]);let r="";t.forEach((function(t){r+=t===e?"\t*":"\t|"}));const i=[r,e.id,e.seq];for(let t in branches)branches[t]===e.id&&i.push(t);if(log.debug(i.join(" ")),e.parents&&2==e.parents.length){const r=commits[e.parents[0]];upsert(t,e,r),t.push(commits[e.parents[1]])}else{if(0==e.parents.length)return;{const r=commits[e.parents];upsert(t,e,r)}}prettyPrintCommitHistory(t=uniqBy(t,(t=>t.id)))}const prettyPrint=function(){log.debug(commits),prettyPrintCommitHistory([getCommitsArray()[0]])},clear$1=function(){commits={},head=null;let t=getConfig().gitGraph.mainBranchName,e=getConfig().gitGraph.mainBranchOrder;branches={},branches[t]=null,branchesConfig={},branchesConfig[t]={name:t,order:e},curBranch=t,seq=0,clear$2()},getBranchesAsObjArray=function(){return Object.values(branchesConfig).map(((t,e)=>null!==t.order?t:{...t,order:parseFloat(`0.${e}`,10)})).sort(((t,e)=>t.order-e.order)).map((({name:t})=>({name:t})))},getBranches=function(){return branches},getCommits=function(){return commits},getCommitsArray=function(){const t=Object.keys(commits).map((function(t){return commits[t]}));return t.forEach((function(t){log.debug(t.id)})),t.sort(((t,e)=>t.seq-e.seq)),t},getCurrentBranch=function(){return curBranch},getDirection=function(){return direction},getHead=function(){return head},commitType$1={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},gitGraphDb={parseDirective,getConfig:()=>getConfig().gitGraph,setDirection,setOptions,getOptions,commit,branch,merge,cherryPick,checkout,prettyPrint,clear:clear$1,getBranchesAsObjArray,getBranches,getCommits,getCommitsArray,getCurrentBranch,getDirection,getHead,setAccTitle,getAccTitle,getAccDescription,setAccDescription,setDiagramTitle,getDiagramTitle,commitType:commitType$1};let allCommitsDict={};const commitType={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},THEME_COLOR_LIMIT=8;let branchPos={},commitPos={},lanes=[],maxPos=0,dir="LR";const clear=()=>{branchPos={},commitPos={},allCommitsDict={},maxPos=0,lanes=[],dir="LR"},drawText=t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");let r=[];r="string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):Array.isArray(t)?t:[];for(const t of r){const r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}return e},drawCommits=(t,e,r)=>{const i=getConfig$1().gitGraph,a=t.append("g").attr("class","commit-bullets"),c=t.append("g").attr("class","commit-labels");let n=0;"TB"===dir&&(n=30),Object.keys(e).sort(((t,r)=>e[t].seq-e[r].seq)).forEach((t=>{const s=e[t],o="TB"===dir?n+10:branchPos[s.branch].pos,m="TB"===dir?branchPos[s.branch].pos:n+10;if(r){let t,e=void 0!==s.customType&&""!==s.customType?s.customType:s.type;switch(e){case commitType.NORMAL:t="commit-normal";break;case commitType.REVERSE:t="commit-reverse";break;case commitType.HIGHLIGHT:t="commit-highlight";break;case commitType.MERGE:t="commit-merge";break;case commitType.CHERRY_PICK:t="commit-cherry-pick";break;default:t="commit-normal"}if(e===commitType.HIGHLIGHT){const e=a.append("rect");e.attr("x",m-10),e.attr("y",o-10),e.attr("height",20),e.attr("width",20),e.attr("class",`commit ${s.id} commit-highlight${branchPos[s.branch].index%8} ${t}-outer`),a.append("rect").attr("x",m-6).attr("y",o-6).attr("height",12).attr("width",12).attr("class",`commit ${s.id} commit${branchPos[s.branch].index%8} ${t}-inner`)}else if(e===commitType.CHERRY_PICK)a.append("circle").attr("cx",m).attr("cy",o).attr("r",10).attr("class",`commit ${s.id} ${t}`),a.append("circle").attr("cx",m-3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${s.id} ${t}`),a.append("circle").attr("cx",m+3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${s.id} ${t}`),a.append("line").attr("x1",m+3).attr("y1",o+1).attr("x2",m).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${s.id} ${t}`),a.append("line").attr("x1",m-3).attr("y1",o+1).attr("x2",m).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${s.id} ${t}`);else{const r=a.append("circle");if(r.attr("cx",m),r.attr("cy",o),r.attr("r",s.type===commitType.MERGE?9:10),r.attr("class",`commit ${s.id} commit${branchPos[s.branch].index%8}`),e===commitType.MERGE){const e=a.append("circle");e.attr("cx",m),e.attr("cy",o),e.attr("r",6),e.attr("class",`commit ${t} ${s.id} commit${branchPos[s.branch].index%8}`)}e===commitType.REVERSE&&a.append("path").attr("d",`M ${m-5},${o-5}L${m+5},${o+5}M${m-5},${o+5}L${m+5},${o-5}`).attr("class",`commit ${t} ${s.id} commit${branchPos[s.branch].index%8}`)}}if(commitPos[s.id]="TB"===dir?{x:m,y:n+10}:{x:n+10,y:o},r){const t=4,e=2;if(s.type!==commitType.CHERRY_PICK&&(s.customId&&s.type===commitType.MERGE||s.type!==commitType.MERGE)&&i.showCommitLabel){const r=c.append("g"),a=r.insert("rect").attr("class","commit-label-bkg"),l=r.append("text").attr("x",n).attr("y",o+25).attr("class","commit-label").text(s.id);let h=l.node().getBBox();if(a.attr("x",n+10-h.width/2-e).attr("y",o+13.5).attr("width",h.width+2*e).attr("height",h.height+2*e),"TB"===dir&&(a.attr("x",m-(h.width+4*t+5)).attr("y",o-12),l.attr("x",m-(h.width+4*t)).attr("y",o+h.height-12)),"TB"!==dir&&l.attr("x",n+10-h.width/2),i.rotateCommitLabel)if("TB"===dir)l.attr("transform","rotate(-45, "+m+", "+o+")"),a.attr("transform","rotate(-45, "+m+", "+o+")");else{let t=-7.5-(h.width+10)/25*9.5,e=10+h.width/25*8.5;r.attr("transform","translate("+t+", "+e+") rotate(-45, "+n+", "+o+")")}}if(s.tag){const r=c.insert("polygon"),i=c.append("circle"),a=c.append("text").attr("y",o-16).attr("class","tag-label").text(s.tag);let l=a.node().getBBox();a.attr("x",n+10-l.width/2);const h=l.height/2,g=o-19.2;r.attr("class","tag-label-bkg").attr("points",`\n          ${n-l.width/2-t/2},${g+e}\n          ${n-l.width/2-t/2},${g-e}\n          ${n+10-l.width/2-t},${g-h-e}\n          ${n+10+l.width/2+t},${g-h-e}\n          ${n+10+l.width/2+t},${g+h+e}\n          ${n+10-l.width/2-t},${g+h+e}`),i.attr("cx",n-l.width/2+t/2).attr("cy",g).attr("r",1.5).attr("class","tag-hole"),"TB"===dir&&(r.attr("class","tag-label-bkg").attr("points",`\n            ${m},${n+e}\n            ${m},${n-e}\n            ${m+10},${n-h-e}\n            ${m+10+l.width+t},${n-h-e}\n            ${m+10+l.width+t},${n+h+e}\n            ${m+10},${n+h+e}`).attr("transform","translate(12,12) rotate(45, "+m+","+n+")"),i.attr("cx",m+t/2).attr("cy",n).attr("transform","translate(12,12) rotate(45, "+m+","+n+")"),a.attr("x",m+5).attr("y",n+3).attr("transform","translate(14,14) rotate(45, "+m+","+n+")"))}}n+=50,n>maxPos&&(maxPos=n)}))},hasOverlappingCommits=(t,e,r)=>Object.keys(r).filter((i=>r[i].branch===e.branch&&r[i].seq>t.seq&&r[i].seq<e.seq)).length>0,findLane=(t,e,r=0)=>{const i=t+Math.abs(t-e)/2;if(r>5)return i;if(lanes.every((t=>Math.abs(t-i)>=10)))return lanes.push(i),i;const a=Math.abs(t-e);return findLane(t,e-a/5,r+1)},drawArrow=(t,e,r,i)=>{const a=commitPos[e.id],c=commitPos[r.id],n=hasOverlappingCommits(e,r,i);let s,o="",m="",l=0,h=0,g=branchPos[r.branch].index;if(n){o="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",l=10,h=10,g=branchPos[r.branch].index;const t=a.y<c.y?findLane(a.y,c.y):findLane(c.y,a.y),e=a.x<c.x?findLane(a.x,c.x):findLane(c.x,a.x);s="TB"===dir?a.x<c.x?`M ${a.x} ${a.y} L ${e-l} ${a.y} ${m} ${e} ${a.y+h} L ${e} ${c.y-l} ${o} ${e+h} ${c.y} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${e+l} ${a.y} ${o} ${e} ${a.y+h} L ${e} ${c.y-l} ${m} ${e-h} ${c.y} L ${c.x} ${c.y}`:a.y<c.y?`M ${a.x} ${a.y} L ${a.x} ${t-l} ${o} ${a.x+h} ${t} L ${c.x-l} ${t} ${m} ${c.x} ${t+h} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${a.x} ${t+l} ${m} ${a.x+h} ${t} L ${c.x-l} ${t} ${o} ${c.x} ${t-h} L ${c.x} ${c.y}`}else"TB"===dir?(a.x<c.x&&(o="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,h=20,g=branchPos[r.branch].index,s=`M ${a.x} ${a.y} L ${c.x-l} ${a.y} ${m} ${c.x} ${a.y+h} L ${c.x} ${c.y}`),a.x>c.x&&(o="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,h=20,g=branchPos[e.branch].index,s=`M ${a.x} ${a.y} L ${a.x} ${c.y-l} ${m} ${a.x-h} ${c.y} L ${c.x} ${c.y}`),a.x===c.x&&(g=branchPos[e.branch].index,s=`M ${a.x} ${a.y} L ${a.x+l} ${a.y} ${o} ${a.x+h} ${c.y+l} L ${c.x} ${c.y}`)):(a.y<c.y&&(o="A 20 20, 0, 0, 0,",l=20,h=20,g=branchPos[r.branch].index,s=`M ${a.x} ${a.y} L ${a.x} ${c.y-l} ${o} ${a.x+h} ${c.y} L ${c.x} ${c.y}`),a.y>c.y&&(o="A 20 20, 0, 0, 0,",l=20,h=20,g=branchPos[e.branch].index,s=`M ${a.x} ${a.y} L ${c.x-l} ${a.y} ${o} ${c.x} ${a.y-h} L ${c.x} ${c.y}`),a.y===c.y&&(g=branchPos[e.branch].index,s=`M ${a.x} ${a.y} L ${a.x} ${c.y-l} ${o} ${a.x+h} ${c.y} L ${c.x} ${c.y}`));t.append("path").attr("d",s).attr("class","arrow arrow"+g%8)},drawArrows=(t,e)=>{const r=t.append("g").attr("class","commit-arrows");Object.keys(e).forEach((t=>{const i=e[t];i.parents&&i.parents.length>0&&i.parents.forEach((t=>{drawArrow(r,e[t],i,e)}))}))},drawBranches=(t,e)=>{const r=getConfig$1().gitGraph,i=t.append("g");e.forEach(((t,e)=>{const a=e%8,c=branchPos[t.name].pos,n=i.append("line");n.attr("x1",0),n.attr("y1",c),n.attr("x2",maxPos),n.attr("y2",c),n.attr("class","branch branch"+a),"TB"===dir&&(n.attr("y1",30),n.attr("x1",c),n.attr("y2",maxPos),n.attr("x2",c)),lanes.push(c);let s=t.name;const o=drawText(s),m=i.insert("rect"),l=i.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);l.node().appendChild(o);let h=o.getBBox();m.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-h.width-4-(!0===r.rotateCommitLabel?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),l.attr("transform","translate("+(-h.width-14-(!0===r.rotateCommitLabel?30:0))+", "+(c-h.height/2-1)+")"),"TB"===dir&&(m.attr("x",c-h.width/2-10).attr("y",0),l.attr("transform","translate("+(c-h.width/2-5)+", 0)")),"TB"!==dir&&m.attr("transform","translate(-19, "+(c-h.height/2)+")")}))},draw=function(t,e,r,i){branchPos={},commitPos={},allCommitsDict={},maxPos=0,lanes=[],dir="LR";const a=getConfig$1(),c=a.gitGraph;log.debug("in gitgraph renderer",t+"\n","id:",e,r),allCommitsDict=i.db.getCommits();const n=i.db.getBranchesAsObjArray();dir=i.db.getDirection();const s=select(`[id="${e}"]`);let o=0;n.forEach(((t,e)=>{const r=drawText(t.name),i=s.append("g"),a=i.insert("g").attr("class","branchLabel"),n=a.insert("g").attr("class","label branch-label");n.node().appendChild(r);let m=r.getBBox();branchPos[t.name]={pos:o,index:e},o+=50+(c.rotateCommitLabel?40:0)+("TB"===dir?m.width/2:0),n.remove(),a.remove(),i.remove()})),drawCommits(s,allCommitsDict,!1),c.showBranches&&drawBranches(s,n),drawArrows(s,allCommitsDict),drawCommits(s,allCommitsDict,!0),utils.insertTitle(s,"gitTitleText",c.titleTopMargin,i.db.getDiagramTitle()),setupGraphViewbox(void 0,s,c.diagramPadding,c.useMaxWidth??a.useMaxWidth)},gitGraphRenderer={draw},getStyles=t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,gitGraphStyles=getStyles,diagram={parser:gitGraphParser,db:gitGraphDb,renderer:gitGraphRenderer,styles:gitGraphStyles};export{diagram};