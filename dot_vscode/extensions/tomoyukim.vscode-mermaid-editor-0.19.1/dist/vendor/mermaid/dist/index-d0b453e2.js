import{b as j,a as m,m as D,G,l as A}from"./layout-c5a37d74.js";import{c as O,i as X,a as M,b as _,d as $,u as H,s as V,e as q,f as U,p as B,g as W,h as Y}from"./edges-558884ee.js";import{l as i,q as N,c as E,j as L}from"./mermaid-42f7bf2b.js";import{c as z}from"./createText-94e3ebbf.js";var K=4;function Q(e){return j(e,K)}function y(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:Z(e),edges:I(e)};return m(e.graph())||(t.value=Q(e.graph())),t}function Z(e){return D(e.nodes(),(function(t){var i=e.node(t),n=e.parent(t),r={v:t};return m(i)||(r.value=i),m(n)||(r.parent=n),r}))}function I(e){return D(e.edges(),(function(t){var i=e.edge(t),n={v:t.v,w:t.w};return m(t.name)||(n.name=t.name),m(i)||(n.value=i),n}))}let f={},x={},T={};const tt=()=>{x={},T={},f={}},S=(e,t)=>(i.trace("In isDecendant",t," ",e," = ",x[t].includes(e)),!!x[t].includes(e)),et=(e,t)=>(i.info("Decendants of ",t," is ",x[t]),i.info("Edge is ",e),e.v!==t&&e.w!==t&&(x[t]?x[t].includes(e.v)||S(e.v,t)||S(e.w,t)||x[t].includes(e.w):(i.debug("Tilt, ",t,",not in decendants"),!1))),J=(e,t,n,r)=>{i.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const a=t.children(e)||[];e!==r&&a.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach((a=>{if(t.children(a).length>0)J(a,t,n,r);else{const d=t.node(a);i.info("cp ",a," to ",r," with parent ",e),n.setNode(a,d),r!==t.parent(a)&&(i.warn("Setting parent",a,t.parent(a)),n.setParent(a,t.parent(a))),e!==r&&a!==e?(i.debug("Setting parent",a,e),n.setParent(a,e)):(i.info("In copy ",e,"root",r,"data",t.node(e),r),i.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));const o=t.edges(a);i.debug("Copying Edges",o),o.forEach((a=>{i.info("Edge",a);const d=t.edge(a.v,a.w,a.name);i.info("Edge data",d,r);try{et(a,r)?(i.info("Copying as ",a.v,a.w,d,a.name),n.setEdge(a.v,a.w,d,a.name),i.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):i.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}catch(e){i.error(e)}}))}i.debug("Removing node",a),t.removeNode(a)}))},p=(e,t)=>{const i=t.children(e);let n=[...i];for(const r of i)T[r]=e,n=[...n,...p(r,t)];return n},b=(e,t)=>{i.trace("Searching",e);const n=t.children(e);if(i.trace("Searching children of id ",e,n),n.length<1)return i.trace("This is a valid node",e),e;for(const r of n){const n=b(r,t);if(n)return i.trace("Found replacement for",e," => ",n),n}},v=e=>f[e]&&f[e].externalConnections&&f[e]?f[e].id:e,nt=(e,t)=>{!e||t>10?i.debug("Opting out, no graph "):(i.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(i.warn("Cluster identified",t," Replacement id in edges: ",b(t,e)),x[t]=p(t,e),f[t]={id:b(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(i.debug("Cluster identified",t,x),r.forEach((e=>{e.v!==t&&e.w!==t&&S(e.v,t)^S(e.w,t)&&(i.warn("Edge: ",e," leaves cluster ",t),i.warn("Decendants of XXX ",t,": ",x[t]),f[t].externalConnections=!0)}))):i.debug("Not a cluster ",t,x)})),e.edges().forEach((function(t){const n=e.edge(t);i.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),i.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,a=t.w;if(i.warn("Fix XXX",f,"ids:",t.v,t.w,"Translating: ",f[t.v]," --- ",f[t.w]),f[t.v]&&f[t.w]&&f[t.v]===f[t.w]){i.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),i.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=v(t.v),a=v(t.w),e.removeEdge(t.v,t.w,t.name);const d=t.w+"---"+t.v;e.setNode(d,{domId:d,id:d,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const o=JSON.parse(JSON.stringify(n)),s=JSON.parse(JSON.stringify(n));o.label="",o.arrowTypeEnd="none",s.label="",o.fromCluster=t.v,s.toCluster=t.v,e.setEdge(r,d,o,t.name+"-cyclic-special"),e.setEdge(d,a,s,t.name+"-cyclic-special")}else(f[t.v]||f[t.w])&&(i.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=v(t.v),a=v(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(n.fromCluster=t.v),a!==t.w&&(n.toCluster=t.w),i.warn("Fix Replacing with XXX",r,a,t.name),e.setEdge(r,a,n,t.name))})),i.warn("Adjusted Graph",y(e)),R(e,0),i.trace(f))},R=(e,t)=>{if(i.warn("extractor - ",t,y(e),e.children("D")),t>10)return void i.error("Bailing out");let n=e.nodes(),r=!1;for(const t of n){const i=e.children(t);r=r||i.length>0}if(r){i.debug("Nodes = ",n,t);for(const r of n)if(i.debug("Extracting node",r,f,f[r]&&!f[r].externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),f[r])if(!f[r].externalConnections&&e.children(r)&&e.children(r).length>0){i.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";f[r]&&f[r].clusterData&&f[r].clusterData.dir&&(n=f[r].clusterData.dir,i.warn("Fixing dir",f[r].clusterData.dir,n));const a=new G({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));i.warn("Old graph before copy",y(e)),J(r,e,a,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:f[r].clusterData,labelText:f[r].labelText,graph:a}),i.warn("New graph after copy node: (",r,")",y(a)),i.debug("Old graph after copy",y(e))}else i.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!f[r].externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),i.debug(f);else i.debug("Not a cluster",r,t);n=e.nodes(),i.warn("New list of nodes",n);for(const r of n){const n=e.node(r);i.warn(" Now next level",r,n),n.clusterNode&&R(n.graph,t+1)}}else i.debug("Done, no node has children",e.nodes())},P=(e,t)=>{if(0===t.length)return[];let i=Object.assign(t);return t.forEach((t=>{const n=e.children(t),r=P(e,n);i=[...i,...r]})),i},it=e=>P(e,e.children()),st=(e,t)=>{i.info("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),a=N(E().flowchart.htmlLabels),d=n.insert("g").attr("class","cluster-label"),o="markdown"===t.labelType?z(d,t.labelText,{style:t.labelStyle,useHtmlLabels:a}):d.node().appendChild(O(t.labelText,t.labelStyle,void 0,!0));let s=o.getBBox();if(N(E().flowchart.htmlLabels)){const e=o.children[0],t=L(o);s=e.getBoundingClientRect(),t.attr("width",s.width),t.attr("height",s.height)}const c=0*t.padding,l=c/2,h=t.width<=s.width+c?s.width+c:t.width;t.width<=s.width+c?t.diff=(s.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,i.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-h/2).attr("y",t.y-t.height/2-l).attr("width",h).attr("height",t.height+c),a?d.attr("transform","translate("+(t.x-s.width/2)+", "+(t.y-t.height/2)+")"):d.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const g=r.node().getBBox();return t.width=g.width,t.height=g.height,t.intersect=function(e){return X(t,e)},n},rt=(e,t)=>{const i=e.insert("g").attr("class","note-cluster").attr("id",t.id),n=i.insert("rect",":first-child"),r=0*t.padding,a=r/2;n.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+r).attr("height",t.height+r).attr("fill","none");const d=n.node().getBBox();return t.width=d.width,t.height=d.height,t.intersect=function(e){return X(t,e)},i},at=(e,t)=>{const i=e.insert("g").attr("class",t.classes).attr("id",t.id),n=i.insert("rect",":first-child"),r=i.insert("g").attr("class","cluster-label"),a=i.append("rect"),d=r.node().appendChild(O(t.labelText,t.labelStyle,void 0,!0));let o=d.getBBox();if(N(E().flowchart.htmlLabels)){const e=d.children[0],t=L(d);o=e.getBoundingClientRect(),t.attr("width",o.width),t.attr("height",o.height)}o=d.getBBox();const s=0*t.padding,c=s/2,l=t.width<=o.width+t.padding?o.width+t.padding:t.width;t.width<=o.width+t.padding?t.diff=(o.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,n.attr("class","outer").attr("x",t.x-l/2-c).attr("y",t.y-t.height/2-c).attr("width",l+s).attr("height",t.height+s),a.attr("class","inner").attr("x",t.x-l/2-c).attr("y",t.y-t.height/2-c+o.height-1).attr("width",l+s).attr("height",t.height+s-o.height-3),r.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2-t.padding/3+(N(E().flowchart.htmlLabels)?5:3))+")");const h=n.node().getBBox();return t.height=h.height,t.intersect=function(e){return X(t,e)},i},ct=(e,t)=>{const i=e.insert("g").attr("class",t.classes).attr("id",t.id),n=i.insert("rect",":first-child"),r=0*t.padding,a=r/2;n.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+r).attr("height",t.height+r);const d=n.node().getBBox();return t.width=d.width,t.height=d.height,t.diff=-t.padding/2,t.intersect=function(e){return X(t,e)},i},ot={rect:st,roundedWithTitle:at,noteGroup:rt,divider:ct};let F={};const lt=(e,t)=>{i.trace("Inserting cluster");const n=t.shape||"rect";F[t.id]=ot[n](e,t)},ft=()=>{F={}},k=async(e,t,n,r)=>{i.info("Graph in recursive render: XXX",y(t),r);const a=t.graph().rankdir;i.trace("Dir in recursive render - dir:",a);const d=e.insert("g").attr("class","root");t.nodes()?i.info("Recursive render XXX",t.nodes()):i.info("No nodes found for",t),t.edges().length>0&&i.trace("Recursive edges",t.edge(t.edges()[0]));const o=d.insert("g").attr("class","clusters"),s=d.insert("g").attr("class","edgePaths"),c=d.insert("g").attr("class","edgeLabels"),l=d.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const d=t.node(e);if(void 0!==r){const n=JSON.parse(JSON.stringify(r.clusterData));i.info("Setting data for cluster XXX (",e,") ",n,r),t.setNode(r.id,n),t.parent(e)||(i.trace("Setting parent",e,r.id),t.setParent(e,r.id,n))}if(i.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),d&&d.clusterNode){i.info("Cluster identified",e,d.width,t.node(e));const r=await k(l,d.graph,n,t.node(e)),a=r.elem;H(d,a),d.diff=r.diff||0,i.info("Node bounds (abc123)",e,d,d.width,d.x,d.y),V(a,d),i.warn("Recursive render complete ",a,d)}else t.children(e).length>0?(i.info("Cluster - the non recursive path XXX",e,d.id,d,t),i.info(b(d.id,t)),f[d.id]={id:b(d.id,t),node:d}):(i.info("Node - the non recursive path",e,d.id,d),await q(l,t.node(e),a))}))),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),i.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),i.info("Fix",f,"ids:",e.v,e.w,"Translateing: ",f[e.v],f[e.w]),U(c,n)})),t.edges().forEach((function(e){i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),i.info("#############################################"),i.info("###                Layout                 ###"),i.info("#############################################"),i.info(t),A(t),i.info("Graph after layout:",y(t));let h=0;return it(t).forEach((function(e){const n=t.node(e);i.info("Position "+e+": "+JSON.stringify(t.node(e))),i.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?B(n):t.children(e).length>0?(lt(o,n),f[n.id].node=n):B(n)})),t.edges().forEach((function(e){const r=t.edge(e);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r);const a=W(s,e,r,f,n,t);Y(r,a)})),t.nodes().forEach((function(e){const n=t.node(e);i.info(e,n.type,n.diff),"group"===n.type&&(h=n.diff)})),{elem:d,diff:h}},gt=async(e,t,n,r,a)=>{M(e,n,r,a),_(),$(),F={},x={},T={},f={},i.warn("Graph at first:",y(t)),nt(t),i.warn("Graph after:",y(t)),await k(e,t,r)};export{gt as r};