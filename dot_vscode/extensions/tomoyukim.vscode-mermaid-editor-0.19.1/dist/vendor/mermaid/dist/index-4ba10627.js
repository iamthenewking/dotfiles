import{b as baseClone,a as isUndefined,m as map,G as Graph,l as layout}from"./layout-cc6d5710.js";import{c as createLabel,i as intersectRect,a as insertMarkers,b as clear$2,d as clear$3,u as updateNodeBounds,s as setNodeElem,e as insertNode,f as insertEdgeLabel,p as positionNode,g as insertEdge,h as positionEdgeLabel}from"./edges-df708b89.js";import{l as log,q as evaluate,c as getConfig,j as d3select}from"./mermaid-766fee4c.js";import{c as createText}from"./createText-2c3b104b.js";var CLONE_SYMBOLS_FLAG=4;function clone(e){return baseClone(e,CLONE_SYMBOLS_FLAG)}function write(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:writeNodes(e),edges:writeEdges(e)};return isUndefined(e.graph())||(t.value=clone(e.graph())),t}function writeNodes(e){return map(e.nodes(),(function(t){var n=e.node(t),r=e.parent(t),i={v:t};return isUndefined(n)||(i.value=n),isUndefined(r)||(i.parent=r),i}))}function writeEdges(e){return map(e.edges(),(function(t){var n=e.edge(t),r={v:t.v,w:t.w};return isUndefined(t.name)||(r.name=t.name),isUndefined(n)||(r.value=n),r}))}let clusterDb={},descendants={},parents={};const clear$1=()=>{descendants={},parents={},clusterDb={}},isDescendant=(e,t)=>(log.trace("In isDecendant",t," ",e," = ",descendants[t].includes(e)),!!descendants[t].includes(e)),edgeInCluster=(e,t)=>(log.info("Decendants of ",t," is ",descendants[t]),log.info("Edge is ",e),e.v!==t&&e.w!==t&&(descendants[t]?descendants[t].includes(e.v)||isDescendant(e.v,t)||isDescendant(e.w,t)||descendants[t].includes(e.w):(log.debug("Tilt, ",t,",not in decendants"),!1))),copy=(e,t,n,r)=>{log.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const i=t.children(e)||[];e!==r&&i.push(e),log.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(t.children(i).length>0)copy(i,t,n,r);else{const s=t.node(i);log.info("cp ",i," to ",r," with parent ",e),n.setNode(i,s),r!==t.parent(i)&&(log.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(log.debug("Setting parent",i,e),n.setParent(i,e)):(log.info("In copy ",e,"root",r,"data",t.node(e),r),log.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const o=t.edges(i);log.debug("Copying Edges",o),o.forEach((i=>{log.info("Edge",i);const s=t.edge(i.v,i.w,i.name);log.info("Edge data",s,r);try{edgeInCluster(i,r)?(log.info("Copying as ",i.v,i.w,s,i.name),n.setEdge(i.v,i.w,s,i.name),log.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):log.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(e){log.error(e)}}))}log.debug("Removing node",i),t.removeNode(i)}))},extractDescendants=(e,t)=>{const n=t.children(e);let r=[...n];for(const i of n)parents[i]=e,r=[...r,...extractDescendants(i,t)];return r},findNonClusterChild=(e,t)=>{log.trace("Searching",e);const n=t.children(e);if(log.trace("Searching children of id ",e,n),n.length<1)return log.trace("This is a valid node",e),e;for(const r of n){const n=findNonClusterChild(r,t);if(n)return log.trace("Found replacement for",e," => ",n),n}},getAnchorId=e=>clusterDb[e]&&clusterDb[e].externalConnections&&clusterDb[e]?clusterDb[e].id:e,adjustClustersAndEdges=(e,t)=>{!e||t>10?log.debug("Opting out, no graph "):(log.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(log.warn("Cluster identified",t," Replacement id in edges: ",findNonClusterChild(t,e)),descendants[t]=extractDescendants(t,e),clusterDb[t]={id:findNonClusterChild(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(log.debug("Cluster identified",t,descendants),r.forEach((e=>{e.v!==t&&e.w!==t&&isDescendant(e.v,t)^isDescendant(e.w,t)&&(log.warn("Edge: ",e," leaves cluster ",t),log.warn("Decendants of XXX ",t,": ",descendants[t]),clusterDb[t].externalConnections=!0)}))):log.debug("Not a cluster ",t,descendants)})),e.edges().forEach((function(t){const n=e.edge(t);log.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),log.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(log.warn("Fix XXX",clusterDb,"ids:",t.v,t.w,"Translating: ",clusterDb[t.v]," --- ",clusterDb[t.w]),clusterDb[t.v]&&clusterDb[t.w]&&clusterDb[t.v]===clusterDb[t.w]){log.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),log.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=getAnchorId(t.v),i=getAnchorId(t.w),e.removeEdge(t.v,t.w,t.name);const s=t.w+"---"+t.v;e.setNode(s,{domId:s,id:s,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const o=JSON.parse(JSON.stringify(n)),d=JSON.parse(JSON.stringify(n));o.label="",o.arrowTypeEnd="none",d.label="",o.fromCluster=t.v,d.toCluster=t.v,e.setEdge(r,s,o,t.name+"-cyclic-special"),e.setEdge(s,i,d,t.name+"-cyclic-special")}else(clusterDb[t.v]||clusterDb[t.w])&&(log.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=getAnchorId(t.v),i=getAnchorId(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(n.fromCluster=t.v),i!==t.w&&(n.toCluster=t.w),log.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))})),log.warn("Adjusted Graph",write(e)),extractor(e,0),log.trace(clusterDb))},extractor=(e,t)=>{if(log.warn("extractor - ",t,write(e),e.children("D")),t>10)return void log.error("Bailing out");let n=e.nodes(),r=!1;for(const t of n){const n=e.children(t);r=r||n.length>0}if(r){log.debug("Nodes = ",n,t);for(const r of n)if(log.debug("Extracting node",r,clusterDb,clusterDb[r]&&!clusterDb[r].externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),clusterDb[r])if(!clusterDb[r].externalConnections&&e.children(r)&&e.children(r).length>0){log.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";clusterDb[r]&&clusterDb[r].clusterData&&clusterDb[r].clusterData.dir&&(n=clusterDb[r].clusterData.dir,log.warn("Fixing dir",clusterDb[r].clusterData.dir,n));const i=new Graph({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));log.warn("Old graph before copy",write(e)),copy(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:clusterDb[r].clusterData,labelText:clusterDb[r].labelText,graph:i}),log.warn("New graph after copy node: (",r,")",write(i)),log.debug("Old graph after copy",write(e))}else log.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!clusterDb[r].externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),log.debug(clusterDb);else log.debug("Not a cluster",r,t);n=e.nodes(),log.warn("New list of nodes",n);for(const r of n){const n=e.node(r);log.warn(" Now next level",r,n),n.clusterNode&&extractor(n.graph,t+1)}}else log.debug("Done, no node has children",e.nodes())},sorter=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const r=e.children(t),i=sorter(e,r);n=[...n,...i]})),n},sortNodesByHierarchy=e=>sorter(e,e.children()),rect=(e,t)=>{log.info("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),i=evaluate(getConfig().flowchart.htmlLabels),s=n.insert("g").attr("class","cluster-label"),o="markdown"===t.labelType?createText(s,t.labelText,{style:t.labelStyle,useHtmlLabels:i}):s.node().appendChild(createLabel(t.labelText,t.labelStyle,void 0,!0));let d=o.getBBox();if(evaluate(getConfig().flowchart.htmlLabels)){const e=o.children[0],t=d3select(o);d=e.getBoundingClientRect(),t.attr("width",d.width),t.attr("height",d.height)}const a=0*t.padding,l=a/2,c=t.width<=d.width+a?d.width+a:t.width;t.width<=d.width+a?t.diff=(d.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,log.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-c/2).attr("y",t.y-t.height/2-l).attr("width",c).attr("height",t.height+a),i?s.attr("transform","translate("+(t.x-d.width/2)+", "+(t.y-t.height/2)+")"):s.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const g=r.node().getBBox();return t.width=g.width,t.height=g.height,t.intersect=function(e){return intersectRect(t,e)},n},noteGroup=(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,s=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-s).attr("y",t.y-t.height/2-s).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");const o=r.node().getBBox();return t.width=o.width,t.height=o.height,t.intersect=function(e){return intersectRect(t,e)},n},roundedWithTitle=(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=n.insert("g").attr("class","cluster-label"),s=n.append("rect"),o=i.node().appendChild(createLabel(t.labelText,t.labelStyle,void 0,!0));let d=o.getBBox();if(evaluate(getConfig().flowchart.htmlLabels)){const e=o.children[0],t=d3select(o);d=e.getBoundingClientRect(),t.attr("width",d.width),t.attr("height",d.height)}d=o.getBBox();const a=0*t.padding,l=a/2,c=t.width<=d.width+t.padding?d.width+t.padding:t.width;t.width<=d.width+t.padding?t.diff=(d.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-c/2-l).attr("y",t.y-t.height/2-l).attr("width",c+a).attr("height",t.height+a),s.attr("class","inner").attr("x",t.x-c/2-l).attr("y",t.y-t.height/2-l+d.height-1).attr("width",c+a).attr("height",t.height+a-d.height-3),i.attr("transform","translate("+(t.x-d.width/2)+", "+(t.y-t.height/2-t.padding/3+(evaluate(getConfig().flowchart.htmlLabels)?5:3))+")");const g=r.node().getBBox();return t.height=g.height,t.intersect=function(e){return intersectRect(t,e)},n},divider=(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,s=i/2;r.attr("class","divider").attr("x",t.x-t.width/2-s).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);const o=r.node().getBBox();return t.width=o.width,t.height=o.height,t.diff=-t.padding/2,t.intersect=function(e){return intersectRect(t,e)},n},shapes={rect,roundedWithTitle,noteGroup,divider};let clusterElems={};const insertCluster=(e,t)=>{log.trace("Inserting cluster");const n=t.shape||"rect";clusterElems[t.id]=shapes[n](e,t)},clear=()=>{clusterElems={}},recursiveRender=async(e,t,n,r)=>{log.info("Graph in recursive render: XXX",write(t),r);const i=t.graph().rankdir;log.trace("Dir in recursive render - dir:",i);const s=e.insert("g").attr("class","root");t.nodes()?log.info("Recursive render XXX",t.nodes()):log.info("No nodes found for",t),t.edges().length>0&&log.trace("Recursive edges",t.edge(t.edges()[0]));const o=s.insert("g").attr("class","clusters"),d=s.insert("g").attr("class","edgePaths"),a=s.insert("g").attr("class","edgeLabels"),l=s.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const s=t.node(e);if(void 0!==r){const n=JSON.parse(JSON.stringify(r.clusterData));log.info("Setting data for cluster XXX (",e,") ",n,r),t.setNode(r.id,n),t.parent(e)||(log.trace("Setting parent",e,r.id),t.setParent(e,r.id,n))}if(log.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),s&&s.clusterNode){log.info("Cluster identified",e,s.width,t.node(e));const r=await recursiveRender(l,s.graph,n,t.node(e)),i=r.elem;updateNodeBounds(s,i),s.diff=r.diff||0,log.info("Node bounds (abc123)",e,s,s.width,s.x,s.y),setNodeElem(i,s),log.warn("Recursive render complete ",i,s)}else t.children(e).length>0?(log.info("Cluster - the non recursive path XXX",e,s.id,s,t),log.info(findNonClusterChild(s.id,t)),clusterDb[s.id]={id:findNonClusterChild(s.id,t),node:s}):(log.info("Node - the non recursive path",e,s.id,s),await insertNode(l,t.node(e),i))}))),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),log.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),log.info("Fix",clusterDb,"ids:",e.v,e.w,"Translateing: ",clusterDb[e.v],clusterDb[e.w]),insertEdgeLabel(a,n)})),t.edges().forEach((function(e){log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),log.info("#############################################"),log.info("###                Layout                 ###"),log.info("#############################################"),log.info(t),layout(t),log.info("Graph after layout:",write(t));let c=0;return sortNodesByHierarchy(t).forEach((function(e){const n=t.node(e);log.info("Position "+e+": "+JSON.stringify(t.node(e))),log.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?positionNode(n):t.children(e).length>0?(insertCluster(o,n),clusterDb[n.id].node=n):positionNode(n)})),t.edges().forEach((function(e){const r=t.edge(e);log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r);const i=insertEdge(d,e,r,clusterDb,n,t);positionEdgeLabel(r,i)})),t.nodes().forEach((function(e){const n=t.node(e);log.info(e,n.type,n.diff),"group"===n.type&&(c=n.diff)})),{elem:s,diff:c}},render=async(e,t,n,r,i)=>{insertMarkers(e,n,r,i),clear$2(),clear$3(),clusterElems={},descendants={},parents={},clusterDb={},log.warn("Graph at first:",write(t)),adjustClustersAndEdges(t),log.warn("Graph after:",write(t)),await recursiveRender(e,t,r)};export{render as r};