import{i as initRange}from"./init-cc95ec8e.js";class InternMap extends Map{constructor(e,n=keyof){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=e)for(const[n,t]of e)this.set(n,t)}get(e){return super.get(intern_get(this,e))}has(e){return super.has(intern_get(this,e))}set(e,n){return super.set(intern_set(this,e),n)}delete(e){return super.delete(intern_delete(this,e))}}function intern_get({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):t}function intern_set({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):(e.set(r,t),t)}function intern_delete({_intern:e,_key:n},t){const r=n(t);return e.has(r)&&(t=e.get(r),e.delete(r)),t}function keyof(e){return null!==e&&"object"==typeof e?e.valueOf():e}const implicit=Symbol("implicit");function ordinal(){var e=new InternMap,n=[],t=[],r=implicit;function i(i){let s=e.get(i);if(void 0===s){if(r!==implicit)return r;e.set(i,s=n.push(i)-1)}return t[s%t.length]}return i.domain=function(t){if(!arguments.length)return n.slice();n=[],e=new InternMap;for(const r of t)e.has(r)||e.set(r,n.push(r)-1);return i},i.range=function(e){return arguments.length?(t=Array.from(e),i):t.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return ordinal(n,t).unknown(r)},initRange.apply(i,arguments),i}export{ordinal as o};